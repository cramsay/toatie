import Data.Nat

object Bit : Type where
  O : Bit
  I : Bit

-- FIXME should maybe declare as:
-- simple Vect a : Nat -> Type where
--   VNil : Vect Z a
--   VCons : {k : Nat} ->
--           a -> Vect k a -> Vect (S k) a
--
-- PQD also only lets use parameter types as dependent types... is this the same
-- as restricting use of Pi bound names to stage 0?

simple Vect : Nat -> Type -> Type where
     VNil : {a : Type} -> Vect Z a
     VCons : {a : Type} -> {k : Nat} ->
             a -> Vect k a -> Vect (S k) a

object Bit' : Nat -> Type where
  O' : Bit' 0
  I' : Bit' 1

simple Unsigned : Nat -> Nat -> Type where
  UNil  : Unsigned 0 0
  UCons : {width,val,b : Nat} ->
          Unsigned width val -> Bit' b ->
          Unsigned (S width) (plus b (double val))

simple RGBVect : Nat -> Type -> Type where
     RGBNil : {a : Type} -> RGBVect Z a
     RCons : {a : Type} -> {k : Nat} ->
             a -> RGBVect k a -> RGBVect (S k) a
     GCons : {a : Type} -> {k : Nat} ->
             a -> RGBVect k a -> RGBVect (S k) a
     BCons : {a : Type} -> {k : Nat} ->
             a -> RGBVect k a -> RGBVect (S k) a