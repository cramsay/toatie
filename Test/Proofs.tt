-- A playground for proofs and propositions

import Data.Nat

data Equal : (A : Type) -> (a : A) -> (b : A) -> Type where
  Refl : {A : Type} -> {x : A} -> Equal A x x

data Void : Type where
  {} -- Empty type! Just syntax for an empty block of constructors

-- Let's play with some example of definitional equality.

twoPlusTwoEqFour : Equal Nat (plus 2 2) 4
twoPlusTwoEqFour = Refl {_} {_}

-- -- Checking 2 + 2 = 3 should type error
-- > twoPlusTwoEqThree : Equal Nat (plus 2 2) 3
-- > twoPlusTwoEqThree = Refl {_} {_}

eqInd : (A : Type) ->
        {x : A} ->
        {y : A} ->
        (p : Equal A x y) ->
        {P : (A -> Type)} ->
        (val : P x) ->
        P y
pat A, x, P, val =>
  eqInd A {x} {_} (Refl {A} {x}) {P} val = val

eqInd2 : {A : Type} ->
         {x : A} ->
         {y : A} ->
         {p : Equal A x y} ->
         {P : (A -> Type)} ->
         (val : P x) ->
         P y
pat A x P val =>
  eqInd2 {A} {x} {_} {Refl {A} {x}} {P} val = val

eqSym : {A : Type} ->
        {x : A} ->
        {y : A} ->
        (p : Equal A x y) ->
        Equal A y x
pat A x =>
  eqSym {A} {x} {_} (Refl {A} {x}) = Refl {_} {_}

eqTrans : {A : Type} ->
          {x,y,z : A} ->
          (l : Equal A x y) ->
          (r : Equal A y z) ->
          Equal A x z
pat A y =>
  eqTrans {A} {y} {_} {_} (Refl {A} {y}) (Refl {A} {y}) = Refl {_} {_}

eqCong : {A,B : Type} ->
         {f : A -> B} ->
         {x, y : A} ->
         (p : Equal A x y) ->
         Equal B (f x) (f y)
pat A, B, f, x =>
  eqCong {A} {B} {f} {x} {_} (Refl {A} {x}) = Refl {B} {f x}
         

-- Let's try to prove some of the Nat properties from Idris2's base Nat library
-- These are all pattern matching proofs, using the equality rules above.

natEqSucc : {left, right : Nat} ->
            Equal Nat left right ->
            Equal Nat (S left) (S right)
pat left : Nat =>
  natEqSucc {left} {left} (Refl {Nat} {left}) = Refl {Nat} {S left}
  -- Still makes me uncomfortable pattern matching on left left
  -- Also, our nats are all implicit since we're only pattern matching on the equality proof

natSuccInjective : {left, right : Nat} ->
                   Equal Nat (S left) (S right) ->
                   Equal Nat left right
pat left =>
  natSuccInjective {left} {_} (Refl {Nat} {S left}) = Refl {_} {_}

plusZeroLeftNeutral : (right : Nat) -> Equal Nat (plus 0 right) right
pat right =>
  plusZeroLeftNeutral right = Refl {_} {_}

plusZeroRightNeutral : (left : Nat) -> Equal Nat (plus left 0) left
plusZeroRightNeutral Z = Refl {_} {_}
pat left =>
  plusZeroRightNeutral (S left)
    = let h = plusZeroRightNeutral left
      in eqCong {_} {_} {S} {_} {_} h

plusSuccRightSucc : (left, right : Nat) -> Equal Nat (S (plus left right)) (plus left (S right))
pat right =>
  plusSuccRightSucc Z right = Refl {Nat} {S right}
pat left, right =>
  plusSuccRightSucc (S left) right
    = eqCong {_} {_} {S} {_} {_} (plusSuccRightSucc left right)

plusAssociative : (left, centre, right : Nat) ->
                  Equal Nat (plus left (plus centre right))
                            (plus (plus left centre) right)
pat centre, right =>
  plusAssociative Z centre right = Refl {_} {_}
pat left, centre, right =>
  plusAssociative (S left) centre right =
    let h = plusAssociative left centre right
    in eqCong {_} {_} {S} {_} {_} h

plusCommutative : (left, right : Nat) -> Equal Nat (plus left right)
                                                   (plus right left)
pat right =>
  plusCommutative Z right
    = eqSym {_} {_} {_} (plusZeroRightNeutral right)
pat left, right =>
  plusCommutative (S left) right
    = let h1 = plusCommutative left right
          h2 = eqCong {_} {_} {S} {_} {_} h1
          h3 = eqInd2 {_} {_} {_} {plusSuccRightSucc right left}
                      {\x => Equal Nat (S (plus left right)) x} h2
      in h3


doubleAssociative : (a,b : Nat) -> Equal Nat (double (plus a b))
                                             (plus (double a) (double b))
pat a, b =>
  doubleAssociative a b
    = let h1 = Refl {Nat} {double (plus a b)}
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociative a b (plus a b))}
                                  {\n => Equal Nat (double (plus a b)) n } h1
          h3 = eqInd2 {_} {_} {_} {plusCommutative b (plus a b)}
                                  {\n => Equal Nat (double (plus a b)) (plus a n)} h2
          h4 = eqInd2 {_} {_} {_} { eqSym {_} {_} {_} (plusAssociative a b b) }
                                  {\n => Equal Nat (double (plus a b)) (plus a n)} h3
          h5 = eqInd2 {_} {_} {_} { plusAssociative a a (plus b b) }
                                  {\n => Equal Nat (double (plus a b)) n} h4
      in h5

plusPlusAssociative : (a,b,c,d : Nat) -> Equal Nat (plus (plus a b) (plus c d))
                                                   (plus (plus a c) (plus b d))
pat a,b,c,d =>
  plusPlusAssociative a b c d
    = let h1 = Refl {Nat} {plus (plus a b) (plus c d)}
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociative a b (plus c d))}
                                  {\n => Equal Nat (plus (plus a b) (plus c d)) n} h1
          h3 = eqInd2 {_} {_} {_} {plusCommutative b (plus c d)}
                                  {\n => Equal Nat (plus (plus a b) (plus c d)) (plus a n)} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociative c d b)}
                                  {\n => Equal Nat (plus (plus a b) (plus c d)) (plus a n)} h3
          h5 = eqInd2 {_} {_} {_} {plusCommutative d b}
                                  {\n => Equal Nat (plus (plus a b) (plus c d)) (plus a (plus c n))} h4
          h6 = eqInd2 {_} {_} {_} {plusAssociative a c (plus b d)}
                                  {\n => Equal Nat (plus (plus a b) (plus c d)) n} h5
      in h6

plusEqZeroRight : (a, b : Nat) -> Equal Nat (plus a b) 0 ->
                                  Equal Nat b 0
pat b, prf =>
  plusEqZeroRight Z b prf = prf
pat n, b =>
  plusEqZeroRight (S n) b (Refl {_} {_}) impossible

plusEqZeroLeft : (a, b : Nat) -> Equal Nat (plus a b) 0 ->
                                 Equal Nat a 0
pat a, b, prf =>
  plusEqZeroLeft a b prf
    = let h1 = eqInd _ {_} {_} (plusCommutative a b)
                               {\x => Equal Nat x 0} prf
          in plusEqZeroRight b a h1

plusDoubleEq1ImpliesZ : (a, b : Nat) -> Equal Nat (plus a (plus b b)) 1
                                     -> Equal Nat b 0
pat a, prf =>
  plusDoubleEq1ImpliesZ a Z prf = Refl {_} {_}
pat n, a, prf =>
  plusDoubleEq1ImpliesZ a (S n) prf
    = let h1 = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc a (plus n (S n))))
                               {\x => Equal Nat x 1}
                               prf
          h2 = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc n n))
                               {\x => Equal Nat (S (plus a x)) 1}
                               h1
          h3 = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc a (plus n n)))
                               {\x => Equal Nat (S x) 1}
                               h2
      in case h3 of
           Refl {_} {_} impossible


-- Incomplete minus proofs

minusZeroRight : (left : Nat) -> Equal Nat (minus left 0) left
minusZeroRight Z = Refl {_} {_}
pat n =>
  minusZeroRight (S n) = Refl {_} {_}


-- Mul proofs

mulZeroLeftZero : (x : Nat) -> Equal Nat (mul 0 x) 0
pat n =>
  mulZeroLeftZero n = Refl {_} {_}

mulZeroRightZero : (x : Nat) -> Equal Nat (mul x 0) 0
mulZeroRightZero Z = Refl {_} {_}
pat n =>
  mulZeroRightZero (S n) = mulZeroRightZero n

mulRightSuccPlus : (left, right : Nat) -> Equal Nat (mul left (S right))
                                                    (plus left (mul left right))
pat right =>
  mulRightSuccPlus Z right = Refl {_} {_}
pat left, right =>
  mulRightSuccPlus (S left) right
    = let h1 = eqInd2 {_} {_} {_} {mulRightSuccPlus left right}
                 {\x => Equal Nat (S (plus right (mul left (S right))))
                                  (S (plus right x))}
                 (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {plusAssociative right left (mul left right)}
                 {\x => Equal Nat (S (plus right (mul left (S right))))
                                  (S x)}
                 h1
          h3 = eqInd2 {_} {_} {_} {plusCommutative right left}
                 {\x => Equal Nat (S (plus right (mul left (S right))))
                                  (S (plus x (mul left right)))}
                 h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociative left right (mul left right))}
                 {\x => Equal Nat (S (plus right (mul left (S right))))
                                  (S x)}
                 h3
      in h4

mulLeftSuccPlus : (left, right : Nat) -> Equal Nat (mul (S left) right)
                                                   (plus right (mul left right))
pat left, right =>
  mulLeftSuccPlus left right = Refl {_} {_}

mulCommutative : (left, right : Nat) -> Equal Nat (mul left right)
                                                  (mul right left)
pat right =>
  mulCommutative Z right
    = eqInd2 {_} {_} {_} {mulZeroRightZero right}
        {\x => Equal Nat x (mul right 0)} (Refl {_} {_})
pat left, right =>
  mulCommutative (S left) right
    = let h1 = Refl {_} {mul right (S left)}
          h2 = eqInd2 {_} {_} {_} {mulRightSuccPlus right left}
                 {\x => Equal Nat x (mul right (S left))} h1
      in eqInd2 {_} {_} {_} {mulCommutative right left}
           {\x => Equal Nat (plus right x) (mul right (S left))} h2

mulDistributesOverPlusLeft : (left, centre, right : Nat) ->
                             Equal Nat (mul (plus left centre) right)
                                       (plus (mul left right) (mul centre right))
pat centre, right =>
  mulDistributesOverPlusLeft Z centre right = Refl {_} {_}
pat left, centre, right =>
  mulDistributesOverPlusLeft (S left) centre right
    = let h1 = eqInd2 {_} {_} {_} {mulDistributesOverPlusLeft left centre right}
                 {\x => Equal Nat (plus right (mul (plus left centre) right))
                                  (plus right x)} (Refl {_} {_})
      in eqInd2 {_} {_} {_} {plusAssociative right (mul left right) (mul centre right)}
           {\x => Equal Nat (plus right (mul (plus left centre) right)) x} h1

mulDistributesOverPlusRight : (left, centre, right : Nat) ->
                              Equal Nat (mul left (plus centre right))
                                        (plus (mul left centre) (mul left right))
pat left, centre, right =>
  mulDistributesOverPlusRight left centre right
    = let h1 = mulDistributesOverPlusLeft centre right left
          h2 = eqInd2 {_} {_} {_} {mulCommutative right left}
                 {\x => Equal Nat (mul (plus centre right) left)
                                  (plus (mul centre left) x)} h1
          h3 = eqInd2 {_} {_} {_} {mulCommutative centre left}
                 {\x => Equal Nat (mul (plus centre right) left)
                                  (plus x (mul left right))} h2
          h4 = eqInd2 {_} {_} {_} {mulCommutative (plus centre right) left}
                 {\x => Equal Nat x
                                  (plus (mul left centre) (mul left right))} h3
      in h4

mulAssociative : (left, centre, right : Nat) ->
                              Equal Nat (mul left (mul centre right))
                                        (mul (mul left centre) right)
pat centre, right =>
  mulAssociative Z centre right = Refl {_} {_}
pat left, centre, right =>
  mulAssociative (S left) centre right
    = let h1 = eqInd2 {_} {_} {_} {mulDistributesOverPlusLeft centre (mul left centre) right}
                 {\x => Equal Nat x
                                  (mul (plus centre (mul left centre)) right)}
                 (Refl {_} {_})
      in eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulAssociative left centre right)}
           {\x => Equal Nat (plus (mul centre right) x)
                            (mul (plus centre (mul left centre)) right)} h1

mulOneLeftNeutral : (right : Nat) -> Equal Nat (mul 1 right) right
pat right =>
  mulOneLeftNeutral right = plusZeroRightNeutral right

mulOneRightNeutral : (left : Nat) -> Equal Nat (mul left 1) left
pat left =>
  mulOneRightNeutral left = eqInd2 {_} {_} {_} {mulCommutative 1 left}
                              {\x => Equal Nat x left} (mulOneLeftNeutral left)

-- Proofs on pow

powerPlusMulPower : (base, exp, exp' : Nat) ->
                    Equal Nat (pow base (plus exp exp'))
                              (mul (pow base exp) (pow base exp'))
pat base, exp' =>
  powerPlusMulPower base Z exp'
    = eqInd2 {_} {_} {_} {plusZeroRightNeutral (pow base exp')}
        {\x => Equal Nat x (plus (pow base exp') 0)}
        (Refl {_} {_})
pat exp, base, exp' =>
  powerPlusMulPower base (S exp) exp'
    = let h1 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulAssociative base (pow base exp) (pow base exp'))}
                 {\x => Equal Nat x (mul (mul base (pow base exp)) (pow base exp'))}
                 (Refl {_} {_})
      in eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (powerPlusMulPower base exp exp')}
           {\x => Equal Nat (mul base x) (mul (mul base (pow base exp)) (pow base exp'))} h1

-- Mess of proofs for logs and divs

lteZeroRightFalse : (x : Nat) -> NonZero x -> Equal Bool (lte x Z) False
pat x =>
  lteZeroRightFalse Z (SIsNonZero x) impossible
pat x =>
  lteZeroRightFalse (S x) (SIsNonZero x) = Refl {_} {_}

div2DoubleFloor : (x : Nat) -> Equal Nat (divNatNZ (plus x (S x)) 2 (SIsNonZero 1))
                                         x
div2DoubleFloor Z = Refl {_} {_}
pat x =>
  div2DoubleFloor (S x) =
    let h1 = Refl {_} {divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0)}
        h2 : Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                       (divCase (S (plus x (S (S x)))) 1 (lte (S (plus x (S x))) 0))
           = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc x (S x))}
               {\h => Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                                (divCase (S (plus x (S (S x)))) 1 (lte h 0))
               }
               h1
        h3 : Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                       (S (divCase (minus (S (plus x (S x))) 1) 1 (lte (minus (S (plus x (S x))) 1) 1)))
           = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc x (S x))}
               {\h => Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                                (S (divCase (minus h 1) 1 (lte (minus h 1) 1)))
               } h2
        h4 : Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                       (S (divCase (plus x (S x)) 1 (lte (plus x (S x)) 1)))
           = eqInd2 {_} {_} {_} {minusZeroRight (plus x (S x))}
               {\h => Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                                (S (divCase h 1 (lte h 1)))
               } h3
        rec = div2DoubleFloor x
        h5 : Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                       (S x)
           = eqInd2 {_} {_} {_} {rec}
               {\h => Equal Nat (divCase (S (plus x (S (S x)))) 1 (lte (plus x (S (S x))) 0))
                                (S h)
               } h4
    in h5

maxZeroRightNeutral : (n : Nat) -> Equal Nat (max n 0) n
maxZeroRightNeutral Z = Refl {_} {_}
pat n =>
  maxZeroRightNeutral (S n) = Refl {_} {_}

maxZeroLeftNeutral : (n : Nat) -> Equal Nat (max 0 n) n
maxZeroLeftNeutral Z = Refl {_} {_}
pat n =>
  maxZeroLeftNeutral (S n) = Refl {_} {_}

maxCommutative : (x, y : Nat) -> Equal Nat (max x y) (max y x)
pat y =>
  maxCommutative Z y = eqSym {_} {_} {_} (maxZeroRightNeutral y)
pat x =>
  maxCommutative x Z = maxZeroRightNeutral x
pat x, y =>
  maxCommutative (S x) (S y) = eqCong {_} {_} {S} {_} {_} (maxCommutative x y)

eqDoublePlusSelf : (n : Nat) -> Equal Nat (plus n n) (double' n)
eqDoublePlusSelf Z = Refl {_} {_}
pat n =>
  eqDoublePlusSelf (S n) = eqInd2 {_} {_} {_} {plusSuccRightSucc (S n) n}
                             {\h => Equal Nat h (S (S (double' n)))}
                             (eqCong {_} {_} {\x => S (S x)} {_} {_} (eqDoublePlusSelf n))
