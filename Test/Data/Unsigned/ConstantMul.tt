import Data.Nat
import Data.Nat.Half
import Data.Unsigned
import Proofs

--------------------------------------------------------------------------------
-- Wordlength calcuations for constant multiplication

-- Output bits for our constant multiplication function
-- If either the `Nat` argument is zero, so is the output.
-- This helps us obey the proper domain of log2
mulConstBits : {n : Nat} -> HalfRec n -> Nat -> Nat
mulConstBits {Z} HalfRecZ _ = Z
pat n, hrec =>
  mulConstBits {n} hrec Z = Z
pat n, hrec, w =>
  mulConstBits {n} hrec (S w) = plus (countBits {n} hrec) (S w)

-- Helper proof showing that if our second argument is 0, so it the output of mulConstBits
mulCBZeroLeftZero : {c : Nat} -> (hrec : HalfRec c) -> Equal Nat (mulConstBits {c} hrec 0) 0
mulCBZeroLeftZero {Z} HalfRecZ = Refl {_} {_}
mulCBZeroLeftZero {1} HalfRec1 = Refl {_} {_}
pat n, hrec =>
  mulCBZeroLeftZero {plus (S n) (S n)} (HalfRecEven n hrec) = Refl {_} {_}
pat n, hrec =>
  mulCBZeroLeftZero {S (plus (S n) (S n))} (HalfRecOdd n hrec) = Refl {_} {_}

--------------------------------------------------------------------------------
-- Constant multiplication via simple shift-and-add decomp
--
-- Output widths are calcuated relative to the _width_ of our quoted input,
-- rather than its value to allow synthesis of signals whose value will only
-- be known at circuit run-time

prfMultConstUEvenW : {n : Nat} -> (hrec: HalfRec (S n)) -> (w : Nat) ->
                     Equal Nat (S (mulConstBits {S n} hrec (S w)))
                               (S (plus (countBits {S n} hrec) (S w)))
pat w =>
  prfMultConstUEvenW {Z} HalfRecZ w impossible
pat w =>
  prfMultConstUEvenW {Z} HalfRec1 w = Refl {_} {_}
pat n, w, hrec =>
  prfMultConstUEvenW {plus (n) (S n)} (HalfRecEven n hrec) w = Refl {_} {_}
pat n, w, hrec =>
  prfMultConstUEvenW {plus (S n) (S n)} (HalfRecOdd n hrec) w = Refl {_} {_}

mulConstU : (w : Nat) -> {cval, val : Nat} ->
            (hrec : HalfRec cval) ->
            < Unsigned w val > ->
            < Unsigned (mulConstBits {cval} hrec w) (mul cval val) >
pat w, val, xs =>
  mulConstU w {Z} {val} HalfRecZ xs = [| UNil |]
pat cval, hr =>
  mulConstU Z {cval} {Z} hr [| UNil |]
    = let h1 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulCBZeroLeftZero {cval} hr)}
                 {\h => <Unsigned h 0>}
                 [| UNil |]
      in eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulZeroRightZero cval)}
                 {\h => <Unsigned (mulConstBits {cval} hr 0) h>} h1
pat n, w, val, xs, hrec =>
  mulConstU (S w) {plus (S n) (S n)} {val} (HalfRecEven n hrec) xs
    = let rec = mulConstU (S w) {S n} {val} hrec xs
          ans = [| UCons {mulConstBits {S n} hrec (S w)} {mul (S n) val} {0} ~rec O |]
          h1 = eqInd2 {_} {_} {_}
                 {eqSym {_} {_} {_} (mulDistributesOverPlusLeft (S n) (S n) val)}
                 {\h : Nat => <Unsigned (S (mulConstBits {(S n)} hrec (S w))) h>}
                 ans
          h2 = eqInd2 {_} {_} {_} {prfMultConstUEvenW {n} hrec w}
                 {\h => <Unsigned h (mul (plus (S n) (S n)) val)>}
                 h1
      in h2
pat w, val, xs =>
  mulConstU (S w) {1} {val} HalfRec1 xs
    = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusZeroRightNeutral val)}
        {\h => <Unsigned (S w) h>} xs
pat n, w, val, xs, hrec =>
  mulConstU (S w) {S (plus (S n) (S n))} {val} (HalfRecOdd n hrec) xs
    = let rec = mulConstU (S w) {S n} {val} hrec xs
          recDouble = [| UCons {mulConstBits {S n} hrec (S w)} {mul (S n) val} {0} ~rec O |]
          recDouble' = eqInd2 {_} {_} {_}
                 {eqSym {_} {_} {_} (mulDistributesOverPlusLeft (S n) (S n) val)}
                 {\h : Nat => <Unsigned (S (mulConstBits {S n} hrec (S w))) h>}
                 recDouble
          recDouble'' = eqInd2 {_} {_} {_} {prfMultConstUEvenW {n} hrec w}
                 {\h => <Unsigned h (mul (plus (S n) (S n)) val)>}
                 recDouble'
          xsPad = extend (S (countBits {S n} hrec)) (S w) {_} xs
          ans = addU _ {_} {_} {0} xsPad recDouble'' [|O|]
      in ans