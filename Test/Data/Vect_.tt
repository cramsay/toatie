import Data.Nat
import Data.Nat.Inequality
import Data.Nat.Half
import Data.ZZ
import Data.Fin
import Proofs

data Vect : Nat -> Type -> Type where
     VNil : {a : Type} -> Vect Z a
     VCons : {a : Type} -> {k : Nat} ->
             a -> Vect k a -> Vect (S k) a

head : {a : Type} -> {n : Nat} -> Vect (S n) a -> a
pat a : Type =>
  head {a} {Z} (VNil {a}) impossible
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  head {a} {n} (VCons {a} {n} x xs) = x

tail : {a : Type} -> {n : Nat} -> Vect (S n) a -> Vect n a
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  tail {a} {n} (VCons {a} {n} x xs) = xs

append : {a : Type} -> {n : Nat} -> {m : Nat} -> Vect n a -> Vect m a -> Vect (plus n m) a
pat a : Type, m : Nat, ys : Vect m a =>
  append {a} {Z} {m} (VNil {a}) ys = ys
pat a : Type, n : Nat, m : Nat, x : a, xs : Vect n a, ys : Vect m a =>
  append {a} {S n} {m} (VCons {a} {n} x xs) ys = VCons {a} {plus n m} x (append {a} {n} {m} xs ys)

map : (n : Nat) -> {a : Type} -> {b : Type} ->
      (f : a -> b) ->
      Vect n a -> Vect n b
pat a, b, f =>
  map Z {a} {b} f (VNil {a}) = VNil {b}
pat n, a, b, f, x, xs =>
  map (S n) {a} {b} f (VCons {_} {_} x xs) =
    let y  = f x
        ys = map n {a} {b} f xs
    in VCons {b} {n} y ys

at : {a : Type} -> {n : Nat} -> Fin n -> Vect n a -> a
pat a, n, x, xs =>
  at {a} {S n} (FZ n) (VCons {_} {_} x xs) = x
pat a, n, fin, x, xs =>
  at {a} {S n} (FS n fin) (VCons {_} {_} x xs) = at {a} {n} fin xs

indices : (n : Nat) -> Vect n (Fin n)
indices Z = []
pat n =>
  indices (S n) =
    let rec = map n {_} {_} (FS n) (indices n)
    in VCons {_} {_} (FZ n) rec

foldl : (n : Nat) -> {acc : Type} -> {elem : Type} ->
        (f : acc -> elem -> acc) ->
        (init : acc) ->
        Vect n elem -> acc
pat acc, elem, f, init =>
  foldl Z {acc} {elem} f init (VNil {elem}) =  init
pat n, acc, elem, f, init, xs =>
  foldl (S n) {acc} {elem} f init xs =
    let init = f init (head {elem} {n} xs)
    in foldl n {acc} {elem} f init (tail {elem} {n} xs)

zipWith : (n : Nat) -> {a, b, c : Type} ->
          (f : a -> b -> c) ->
          Vect n a -> Vect n b -> Vect n c
pat a, b, c, f =>
  zipWith Z {a} {b} {c} f [] [] = []
pat n, a, b, c, f, x, xs, y, ys =>
  zipWith (S n) {a} {b} {c} f (VCons {a} {n} x xs) (VCons {b} {n} y ys) =
    let z  = f x y
        zs = zipWith n {a} {b} {c} f xs ys
    in VCons {c} {n} z zs

imap : (n : Nat) -> {a : Type} -> {b : Type} ->
       (f : Fin n -> a -> b) ->
       Vect n a -> Vect n b
pat n, a, b, f, xs =>
  imap n {a} {b} f xs = zipWith n {Fin n} {a} {b} f (indices n) xs


evens : (n : Nat) -> {a : Type} -> Vect (double' n) a -> Vect n a
pat a =>
  evens Z {a} [] = []
pat n, a, x, y, rest =>
  evens (S n) {a} (VCons {_} {_} x (VCons {_} {_} y rest)) = VCons {_} {_} x (evens n {a} rest)

odds : (n : Nat) -> {a : Type} -> Vect (double' n) a -> Vect n a
pat a =>
  odds Z {a} [] = []
pat n, a, x, y, rest =>
  odds (S n) {a} (VCons {_} {_} x (VCons {_} {_} y rest)) = VCons {_} {_} y (odds n {a} rest)

snoc : {n : Nat} -> {a : Type} -> (xs : Vect n a) -> a -> Vect (S n) a
pat a, last =>
  snoc {Z} {a} [] last = [last]
pat n, a, x, xs, last =>
  snoc {S n} {a} (VCons {_} {_} x xs) last = VCons {_} {_} x (snoc {n} {a} xs last)

appendHalves : {n : Nat} -> {a : Type} -> Vect n a -> Vect n a -> Vect (double' n) a
pat a =>
  appendHalves {Z} {a} [] [] = []
pat a, x, y =>
  appendHalves {1} {a} [x] [y] = [x,y]
pat n, a, x, x2, xs, y, y2, ys =>
  appendHalves {S (S n)} {a} (VCons {_} {_} x (VCons {_} {_} x2 xs)) (VCons {_} {_} y (VCons {_} {_} y2 ys))
    = let xs' = snoc {n} {a} xs y
          ys' = VCons {_} {_} y2 ys
      in VCons {_} {_} x (VCons {_} {_} x2 (appendHalves {S n} {a} xs' ys'))

-- Specialsed arithmetic functions for ZZ (used in FFT example)

sumZ : (n : Nat) -> Vect n ZZ -> ZZ
sumZ Z (VNil {ZZ}) = Pos 0
pat x =>
  sumZ 1 [x] = x
pat n, x, xs =>
  sumZ (S n) (VCons {_} {_} x xs) = plusZ x (sumZ n xs)

atCommutesMap : (n : Nat) -> {a,b : Type} -> (i : Fin n) -> (f : a -> b) ->
                (xs : Vect n a) ->
                Equal b (at {b} {n} i (map n {a} {b} f xs))
                        (f (at {a} {n} i xs))
pat a, b, f, x =>
  atCommutesMap 1 {a} {b} (FZ 0) f [x]
    = Refl {_} {_}
pat n, a, b, f, x, xs =>
  atCommutesMap (S (S n)) {a} {b} (FZ (S n)) f (VCons {_} {_} x xs)
    = Refl {_} {_}
pat n, a, b, irec, f, x, xs =>
  atCommutesMap (S (S n)) {a} {b} (FS (S n) irec) f (VCons {_} {_} x xs)
    = atCommutesMap (S n) {a} {b} irec f xs

atCommutesZipWith : (n : Nat) -> {a,b,c : Type} -> (i : Fin n) -> (f : a -> b -> c) ->
                    (xs : Vect n a) -> (ys : Vect n b) ->
                    Equal c (at {c} {n} i (zipWith n {a} {b} {c} f xs ys))
                            (f (at {a} {n} i xs) (at {b} {n} i ys))
pat a, b, c, f, x, y =>
  atCommutesZipWith 1 {a} {b} {c} (FZ 0) f [x] [y]
    = Refl {_} {_}
pat n, a, b, c, f, x, xs, y, ys =>
  atCommutesZipWith (S (S n)) {a} {b} {c} (FZ (S n)) f (VCons {_} {_} x xs) (VCons {_}  {_} y ys)
    = Refl {_} {_}
pat n, a, b, c, irec, f, x, xs, y, ys =>
  atCommutesZipWith (S (S n)) {a} {b} {c} (FS (S n) irec) f (VCons {_} {_} x xs) (VCons {_} {_} y ys)
    = atCommutesZipWith (S n) {a} {b} {c} irec f xs ys

atIndicesNeutral : (n : Nat) -> (i : Fin n) ->
                   Equal (Fin n) (at {Fin n} {n} i (indices n))
                                     i
atIndicesNeutral 1 (FZ 0) = Refl {_} {_}
pat n =>
  atIndicesNeutral (S n) (FZ n) = Refl {_} {_}
pat n, irec =>
  atIndicesNeutral (S n) (FS n irec)
    = let h1 = eqInd2 {_} {_} {_} {atCommutesMap n {Fin n} {Fin (S n)} irec (FS n) (indices n)} 
                 {\h => Equal (Fin (S n))
                          (at {_} {n} irec (map n {_} {_} (FS n) (indices n)))
                          h} (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {atIndicesNeutral n irec} 
                 {\h => Equal (Fin (S n))
                          (at {_} {n} irec (map n {_} {_} (FS n) (indices n)))
                          (FS n h)} h1
      in h2

atCommutesImap : (n : Nat) -> {a,b : Type} -> (i : Fin n) -> (f : (Fin n) -> a -> b) ->
                 (xs : Vect n a) ->
                 Equal b (at {b} {n} i (imap n {a} {b} f xs))
                         (f i (at {a} {n} i xs))
pat a, b, f, x =>
  atCommutesImap 1 {a} {b} (FZ 0) f [x]
    = Refl {_} {_}
pat n, a, b, f, x, xs =>
  atCommutesImap (S (S n)) {a} {b} (FZ (S n)) f (VCons {_} {_} x xs)
    = Refl {_} {_}
pat n, a, b, irec, f, xs =>
  atCommutesImap (S (S n)) {a} {b} (FS (S n) irec) f xs
    = let h1 = atCommutesZipWith (S (S n)) {_} {a} {b} (FS (S n) irec) f (indices (S (S n))) xs
          h2 = eqInd2 {_} {_} {_} {atIndicesNeutral (S (S n)) (FS (S n) irec)}
                 {\h => Equal b
                          (at {_} {_} (FS (S n) irec) (imap (S (S n)) {_} {_} f xs))
                          (f h (at {_} {_} (FS (S n) irec) xs))
                 } h1
      in h2

atCommutesZipWithIndices : 
  (n : Nat) -> {a,b : Type} -> (i : Fin n) -> (f : (Fin n) -> a -> b) ->
  (xs : Vect n a) ->
  Equal b (at {b} {n} i (zipWith n {Fin n} {a} {b} f (indices n) xs))
          (f i (at {a} {n} i xs))
pat n, a, b, i, f, x, xs =>
  atCommutesZipWithIndices n {a} {b} i f xs
    = let -- zipwith commutes
          h1 = eqInd2 {_} {_} {_} {atCommutesZipWith n {Fin n} {a} {b} i f (indices n) xs}
                 {\h => Equal b (at {b} {n} i (zipWith n {Fin n} {a} {b} f (indices n) xs))
                                h
                 } (Refl {_} {_})
          -- indices neutral
          h2 = eqInd2 {_} {_} {_} {atIndicesNeutral n i}
                 {\h => Equal b (at {b} {n} i (zipWith n {Fin n} {a} {b} f (indices n) xs))
                                (f h (at {_} {_} i xs))
                 } h1
      in h2

{-
--------------------------------
(at {b[4]} {(S n[6])} irec[3] (zipWith (S n[6]) {(Fin    (S n[6])) } {a[5]} {b[4]} \i :_0 (Fin (S n[6])) => (f[3] (FS (S n[7]) i[0])) (VCons {(Fin (S n[6]))} {n[6]} (FZ n[6]) (map n[6] {(Fin n[6])} {(Fin (S n[6]))} (FS n[6]) (indices n[6]))) xs[0]))
(at {b[5]} {(S n[7])} irec[4] (zipWith (S n[7]) {(Fin (S (S n[7])))} {a[6]} {b[5]} f[3] (VCons {(Fin (S (S n[7])))} {n[7]} (FS (S n[7]) (FZ n[7])) (map n[7] {(Fin (S n[7]))} {(Fin (S (S n[7])))} (FS (S n[7])) (map n[7] {(Fin n[7])} {(Fin (S n[7]))} (FS n[7]) (indices n[7])))) xs[1]))

(at {b[4]} {(S n[6])} irec[3] (map (S n[6]) {a[5]} {b[4]} (f[2] (FS (S n[6]) irec[3])) xs[0]))
(at {b[5]} {(S n[7])} irec[4] (map (S n[7]) {a[6]} {b[5]} (f[3] (FS (S n[7]) irec[4])) xs[1]))

-}


-- Helper proof to construct equality of two lists, given a proof of equalify
-- for any elements at index `i`.

eqForAllIndices : (n : Nat) -> {a : Type} ->
                  (xs, ys : Vect n a) ->
                  (prfElem : (i : Fin n) -> Equal a (at {a} {n} i xs)
                                                    (at {a} {n} i ys)) ->
                  Equal (Vect n a) xs ys
pat a, prf =>
  eqForAllIndices Z {a} [] [] prf = Refl {_} {_}
pat n, a, x, xs, y, ys, prf =>
  eqForAllIndices (S n) {a} (VCons {_} {_} x xs) (VCons {_} {_} y ys) prf
    = let headEq = prf (FZ n) 
          rec = eqForAllIndices n {a} xs ys (\i => prf (FS n i))
          h1 = eqCong {_} {_} {VCons {_} {_} x} {_} {_} rec
          h2 = eqInd2 {_} {_} {_} {headEq}
                 {\h => Equal (Vect (S n) a) (VCons {_} {_} x xs) (VCons {_} {_} h ys)}
                 h1
      in h2

-- Next we build up to a similar helper, but where two sections of our list
-- require different proofs of element-wise equality.

lemmaNextPrfRs : (n,m : Nat) -> {a : Type} ->
                 (y: a) ->
                 (rs : Vect m a) ->
                 (ys : Vect (plus n m) a) ->
                 (prfRs : (i : Fin m) -> Equal a (at {a} {m} i rs)
                                                 (at {a} {plus (S n) m} (finShift (S n) {m} i) (VCons {a} {plus n m} y ys))
                 ) ->
                 (i' : Fin m) -> Equal a (at {a} {m} i' rs)
                                         (at {a} {(plus n m)} (finShift n {m} i') ys)
pat n, m, a, y, rs, ys, prfRs =>
  lemmaNextPrfRs n (S m) {a} y rs ys prfRs (FZ m) = prfRs (FZ m)
pat n, m, a, y, rs, ys, fin, prfRs =>
  lemmaNextPrfRs n (S m) {a} y rs ys prfRs (FS m fin)
    = prfRs (FS m fin)

eqForSplit : (n,m : Nat) -> {a : Type} ->
             (ls : Vect n a) ->
             (rs : Vect m a) ->
             (ys : Vect (plus n m) a) ->
             (prfLs : (i : Fin n) -> Equal a (at {a} {n} i ls)
                                             (at {a} {plus n m} (finWeakenN' m {n} i) ys)) ->
             (prfRs : (i : Fin m) -> Equal a (at {a} {m} i rs)
                                             (at {a} {plus n m} (finShift    n {m} i) ys)) ->
             Equal (Vect (plus n m) a) (append {a} {n} {m} ls rs) ys
pat m, a, rs, ys, prfLs, prfRs =>
  eqForSplit Z m {a} [] rs ys prfLs prfRs
    = eqForAllIndices m {a} rs ys prfRs
pat n, m, a, l, ls, rs, y, ys, prfLs, prfRs =>
  eqForSplit (S n) m {a} (VCons {_} {_} l ls) rs (VCons {_} {_} y ys) prfLs prfRs
    = let headEq = prfLs (FZ n)
          prfLs' = \i => prfLs (FS n i)
          prfRs' = lemmaNextPrfRs n m {a} y rs ys prfRs
          rec = eqForSplit n m {a} ls rs ys prfLs' prfRs'
      in eqInd2 {_} {_} {_} {headEq}
           {\h => Equal (Vect (plus (S n) m) a)
                    (append {_} {_} {_} (VCons {_} {_} l ls) rs)
                    (VCons {_} {_} h ys)}
           (eqCong {_} {_} {VCons {_} {_} l} {_} {_} rec)

initDoubles : {a : Type} -> (n : Nat) -> (xs : Vect (S (double' n)) a) -> Vect (double' n) a
pat a, x =>
  initDoubles {a} Z [x] = []
pat a, n, x, y, xs =>
  initDoubles {a} (S n) (VCons {_} {_} x (VCons {_} {_} y xs))
    = (VCons {_} {_} x (VCons {_} {_} y (initDoubles {a} n xs)))

lemmaConsInit : {a : Type} -> (n : Nat) ->
                (x, y : a) ->
                (xs : Vect (S (double' n)) a) ->
                Equal (Vect (double' (S n)) a)
                  (VCons {_} {_} x (VCons {_} {_} y (initDoubles {_} n xs)))
                  (initDoubles {_} (S n) (VCons {_} {_} x (VCons {_} {_} y xs)))
pat a, x, y, z =>
  lemmaConsInit {a} Z x y [z] = Refl {_} {_}
pat a, n, x, y, z, zs =>
  lemmaConsInit {a} (S n) x y (VCons {_} {_} z zs)
    = Refl {_} {_}

lemmaInitWeaken : 
  {a : Type} ->
  (n : Nat) ->
  (ys : Vect (S (double' n)) a) ->
  (i : Fin (double' n)) ->
  Equal a (at {a} {_} i (initDoubles {a} n ys))
          (at {a} {_} (finWeaken {_} i) ys)
pat a, n, x, y, xs =>
  lemmaInitWeaken {a} (S n) (VCons {_} {_} x (VCons {_} {_} y xs)) (FZ _)
    = Refl {_} {_}
pat a, n, x, y, xs =>
  lemmaInitWeaken {a} (S n) (VCons {_} {_} x (VCons {_} {_} y xs)) (FS _ (FZ _))
    = Refl {_} {_}
pat a, n, x, y, xs, i =>
  lemmaInitWeaken {a} (S n) (VCons {_} {_} x (VCons {_} {_} y xs)) (FS _ (FS _ i))
    = lemmaInitWeaken {a} n xs i

lemmaConsInitWeaken : 
  {a : Type} ->
  (n : Nat) ->
  (y : a) ->
  (ys : Vect (S (double' n)) a) ->
  (i : Fin (S (double' n))) ->
  Equal a (at {a} {_} i (VCons {_} {_} y (initDoubles {a} n ys)))
          (at {a} {_} (finWeaken {_} i) (VCons {_} {_} y ys))
pat a, n, head, x =>
  lemmaConsInitWeaken {a} 0 head [x] (FZ _)
    = Refl {_} {_}
pat a, n, head, x, y, xs =>
  lemmaConsInitWeaken {a} (S n) head (VCons {_} {_} x (VCons {_} {_} y xs)) (FZ _)
    = Refl {_} {_}
pat a, n, head, xs, i =>
  lemmaConsInitWeaken {a} (S n) head xs (FS _ i)
    = lemmaInitWeaken {a} (S n) xs i

lemmaHalvesNextPrfL :
  {a : Type} ->
  (n : Nat) ->
  (l1, l2 : a) ->
  (ls : Vect n a) ->
  (r1 : a) ->
  (y1, y2, y3, y4 : a) ->
  (ys : Vect (double' n) a) ->
  (prfLs : (i : (Fin (S (S n)))) ->
           (Equal a (at {a} {(S (S n))} i (VCons {a} {(S n)} l1 (VCons {a} {n} l2 ls)))
                    (at {a} {(S (S (S (S (double' n)))))} (finWeakenToDouble (S (S n)) i)
                        (VCons {a} {(S (S (S (double' n))))} y1 (VCons {a} {(S (S (double' n)))} y2 (VCons {a} {(S (double' n))} y3 (VCons {a} {(double' n)} y4 ys))))))) ->
  (prfRs: Equal a r1
                  (at {a} {(S (S (S (S (double' n)))))} (finPlusBound (S (S n)) (FZ _))
                    (VCons {a} {(S (S (S (double' n))))} y1 (VCons {a} {(S (S (double' n)))} y2 (VCons {a} {(S (double' n))} y3 (VCons {a} {(double' n)} y4 ys)))))) ->
  (i' : Fin (S n)) ->
  (Equal a (at {a} {(S n)} i' (snoc {n} {a} ls r1))
           (at {a} {(S (S (double' n)))} (finWeakenToDouble (S n) i') (VCons {a} {(S (double' n))} y3 (VCons {a} {(double' n)} y4 ys))))

pat a, l1, l2, r1, y1, y2, y3, y4, ys, prfLs, prfRs =>
  lemmaHalvesNextPrfL {a} Z l1 l2 [] r1 y1 y2 y3 y4 ys prfLs prfRs (FZ 0) = prfRs

pat a, n, l1, l2, lhead, ls, r1, y1, y2, y3, y4, ys, prfLs, prfRs =>
  lemmaHalvesNextPrfL {a} (S n) l1 l2 (VCons {_} {_} lhead ls) r1 y1 y2 y3 y4 ys prfLs prfRs (FZ (S n))
    = prfLs (FS _ (FS _ (FZ _)))

pat a, l1, l2, l3, r1, y1, y2, y3, y4, y5, y6, prfLs prfRs =>
  lemmaHalvesNextPrfL {a} 1 l1 l2 [l3] r1 y1 y2 y3 y4 [y5, y6] prfLs prfRs (FS 1 (FZ 0))
    = prfRs

pat a, n, l1, l2, l3, ls, r1, y1, y2, y3, y4, y5, ys, prfLs prfRs, fin =>
  lemmaHalvesNextPrfL {a} (S (S n)) l1 l2 (VCons {_} {_} l3 ls)
                                    r1
                                    y1 y2 y3 y4 (VCons {_} {_} y5 ys)
                                    prfLs prfRs (FS (S (S n)) (FS (S n) fin))
    = let recLs = \i : Fin (S (S (S n)))  => eqSym {_} {_} {_} (lemmaInitWeaken {a} (S (S (S  n))) (VCons {_} {_} y2 (VCons {_} {_} y3 (VCons {_} {_} y4 (VCons {_} {_} y5 ys)))) (finWeakenToDouble _ i))
          recLs' = \i => eqTrans {_} {_} {_} {_} (prfLs (FS _i)) (recLs i)
          recRs = eqSym {_} {_} {_} (lemmaInitWeaken {a} (S (S n)) (VCons {_} {_} y4 (VCons {_} {_} y5  ys)) (finWeaken {_} (finWeaken {_} (finPlusBound (S n) (FZ n)))))
          recRs' = eqTrans {_} {_} {_} {_} prfRs recRs
          h1 = lemmaHalvesNextPrfL {a} (S n) l2 l3 ls r1 y2 y3 y4 y5 (initDoubles {_} (S n) ys) recLs' recRs' (FS (S n) fin)
          recH1 = lemmaConsInitWeaken {a} (S n) y5 ys (finWeaken {_} (finWeakenToDouble (S n) fin))
          ans = eqTrans {_} {_} {_} {_} h1 recH1
      in ans

eqForHalves : (n : Nat) -> {a : Type} ->
              (ls, rs : Vect n a) ->
              (ys : Vect (double' n) a) ->
              (prfLs : (i : Fin n) -> Equal a (at {a} {n} i ls)
                                              (at {a} {double' n} (finWeakenToDouble n i) ys)) ->
              (prfRs : (i : Fin n) -> Equal a (at {a} {n} i rs)
                                              (at {a} {double' n} (finPlusBound n i) ys)) ->
              Equal (Vect (double' n) a) (appendHalves {n} {a} ls rs) ys
pat a, prfLs, prfRs =>
  eqForHalves Z {a} [] [] [] prfLs prfRs = Refl {_} {_}
pat a, l, r, x, y, prfLs, prfRs =>
  eqForHalves 1 {a} [l] [r] [x,y] prfLs prfRs
    = let hl = eqInd2 {_} {_} {_} {prfLs (FZ 0)}
                 {\h => Equal _ [l,r] [h,r]}
                 (Refl {_} {_})
          hr = eqInd2 {_} {_} {_} {prfRs (FZ 0)}
                 {\h => Equal _ [l,r] [x,h]} hl
      in hr
pat n, a, l1, l2, ls, r1, r2, rs, y1, y2, y3, y4, ys, prfLs, prfRs =>
  eqForHalves (S (S n)) {a} (VCons {_} {_} l1 (VCons {_} {_} l2 ls))
                            (VCons {_} {_} r1 (VCons {_} {_} r2 rs))
                            (VCons {_} {_} y1 (VCons {_} {_} y2 (VCons {_} {_} y3 (VCons {_} {_} y4 ys))))
                            prfLs prfRs
    = let 
          prfLs' = lemmaHalvesNextPrfL {a} n l1 l2 ls r1 y1 y2 y3 y4 ys prfLs (prfRs (FZ _))
          prfRs' = \i : Fin (S n) => prfRs (FS _ i)
          rec : Equal (Vect (double' (S n)) a)
                  (appendHalves {S n} {a} (snoc {_} {a} ls r1) (VCons {_} {_} r2 rs))
                  (VCons {_} {_} y3 (VCons {_} {_} y4 ys))
              = eqForHalves (S n) {a} (snoc {_} {a} ls r1) (VCons {_} {_} r2 rs)
                                      (VCons {_} {_} y3 (VCons {_} {_} y4 ys))
                                      prfLs' prfRs'
          h1 = eqInd2 {_} {_} {_} {prfLs (FZ _)}
                 {\h => Equal _ (VCons {_} {_} l1 (VCons {_} {_} l2 (appendHalves {_} {_} (snoc {_} {_} ls r1) (VCons {_} {_} r2 rs))))
                                (VCons {_} {_} h  (VCons {_} {_} l2 (VCons {_} {_} y3 (VCons {_} {_} y4 ys))))
                 } (eqCong {_} {_} {\x => VCons {a} {_} l1 (VCons {a} {double' (S n)} l2 x)} {_} {_} rec)
          h2 = eqInd2 {_} {_} {_} {prfLs (FS _ (FZ _))}
                 {\h => Equal _ (VCons {_} {_} l1 (VCons {_} {_} l2 (appendHalves {_} {_} (snoc {_} {_} ls r1) (VCons {_} {_} r2 rs))))
                                (VCons {_} {_} y1  (VCons {_} {_} h (VCons {_} {_} y3 (VCons {_} {_} y4 ys))))
                 } h1
      in h2


multDistributesOverSumZ : (n : Nat) -> (c : ZZ) -> (xs : Vect n ZZ) ->
                          Equal ZZ (multZ c (sumZ n xs)) (sumZ n (map n {_} {_} (multZ c) xs))
pat c =>
  multDistributesOverSumZ Z c [] = multZeroRightZeroZ c
pat c, x =>
  multDistributesOverSumZ 1 c [x] = Refl {_} {_}
pat n, c, x, xs =>
  multDistributesOverSumZ (S (S n)) c (VCons {_} {_} x xs)
    = let h1 = Refl {_} {plusZ (multZ c x) (sumZ (S n) (map (S n) {ZZ} {ZZ} (multZ c) xs))}
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multDistributesOverSumZ (S n) c xs)}
                 {\h => Equal ZZ
                          (plusZ (multZ c x) h)
                          (plusZ (multZ c x) (sumZ (S n) (map (S n) {ZZ} {ZZ} (multZ c) xs)))}
                 h1
          h3 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multDistributesOverPlusRightZ c x (sumZ (S n) xs))}
                 {\h => Equal ZZ
                          h
                          (plusZ (multZ c x) (sumZ (S n) (map (S n) {ZZ} {ZZ} (multZ c) xs)))}
                 h2
      in h3

mapDistributesOverZipWith :
  (n : Nat) ->
  (a, b, c, d : Type) ->
  (fmap : c -> d) ->
  (fzip : a -> b -> c) ->
  (xs : Vect n a) ->
  (ys : Vect n b) ->
  Equal (Vect n d) (map n {_} {_} fmap (zipWith n {_} {_} {_} fzip xs ys))
                   (zipWith n {_} {_} {_} (\j => \k => fmap (fzip j k)) xs ys)
pat a, b, c, d, fmap, fzip =>
  mapDistributesOverZipWith Z a b c d fmap fzip [] [] = Refl {_} {_}
pat n, a, b, c, d, fmap, fzip, x, xs, y, ys =>
  mapDistributesOverZipWith (S n) a b c d fmap fzip (VCons {_} {_} x xs) (VCons {_} {_} y ys)
    = eqCong {_} {_} {VCons {_} {_} (fmap (fzip x y))} {_} {_} (mapDistributesOverZipWith n a b c d fmap fzip xs ys)

mapReducesZipWith :
  (n : Nat) ->
  (a, b, c, d : Type) ->
  (fmap : a -> b) ->
  (fzip : b -> c -> d) ->
  (xs : Vect n a) ->
  (ys : Vect n c) ->
  Equal (Vect n d) (zipWith n {_} {_} {_} fzip (map n {_} {_} fmap xs) ys)
                   (zipWith n {_} {_} {_} (\j' => \k' => fzip (fmap j') k') xs ys)
pat a, b, c, d, fmap, fzip =>
  mapReducesZipWith Z a b c d fmap fzip [] [] = Refl {_} {_}
pat n, a, b, c, d, fmap, fzip, x, xs, y, ys =>
  mapReducesZipWith (S n) a b c d fmap fzip (VCons {_} {_} x xs) (VCons {_} {_} y ys)
    = eqCong {_} {_} {VCons {_} {_} (fzip (fmap x) y)} {_} {_} (mapReducesZipWith n a b c d fmap fzip xs ys)

headsEqual : {a : Type} ->
             (n : Nat) ->
             (x, y : a) ->
             (xs, ys : Vect n a) ->
             Equal (Vect (S n) a) (VCons {_} {_} x xs) (VCons {_} {_} y ys) ->
             Equal a x y
pat a, n, x, xs =>
  headsEqual {a} n x x xs xs (Refl {_} {_}) = Refl {_} {_}

tailsEqual : {a : Type} ->
             (n : Nat) ->
             (x, y : a) ->
             (xs, ys : Vect n a) ->
             Equal (Vect (S n) a) (VCons {_} {_} x xs) (VCons {_} {_} y ys) ->
             Equal (Vect n a) xs ys
pat a, n, x, xs =>
  tailsEqual {a} n x x xs xs (Refl {_} {_}) = Refl {_} {_}

atEvenIndex : {a : Type} ->
              (n : Nat) ->
              (es : Vect n a) ->
              (xs : Vect (double' n) a) ->
              Equal (Vect n a) (evens n {a} xs) es ->
              (i : Fin n) ->
              Equal a (at {_} {_} (finDouble' {_} i) xs)
                      (at {_} {_} i es)
pat a, x, y =>
  atEvenIndex {a} 1 [x] [x,y] (Refl {_} {_}) (FZ 0) = Refl {_} {_}
pat a, n, e, es, x, y, rest, prf =>
  atEvenIndex {a} (S (S n)) (VCons {_} {_} e es) (VCons {_} {_} x (VCons {_} {_} y rest)) prf (FZ (S n))
    = headsEqual {a} (S n) x e (evens (S n) {a} rest) es prf
pat a, n, e, es, x, y, rest, prf, fin =>
  atEvenIndex {a} (S (S n)) (VCons {_} {_} e es) (VCons {_} {_} x (VCons {_} {_} y rest)) prf (FS (S n) fin)
    = atEvenIndex {a} (S n) es rest (tailsEqual {a} (S n) x e (evens (S n) {a} rest) es prf) fin

atOddIndex : {a : Type} ->
             (n : Nat) ->
             (os : Vect n a) ->
             (xs : Vect (double' n) a) ->
             Equal (Vect n a) (odds n {a} xs) os ->
             (i : Fin n) ->
             Equal a (at {_} {_} (finSuccDouble' {_} i) xs)
                     (at {_} {_} i os)
pat a, x, y =>
  atOddIndex {a} 1 [y] [x,y] (Refl {_} {_}) (FZ 0) = Refl {_} {_}
pat a, n, o, os, x, y, rest, prf =>
  atOddIndex {a} (S (S n)) (VCons {_} {_} o os) (VCons {_} {_} x (VCons {_} {_} y rest)) prf (FZ (S n))
    = headsEqual {a} (S n) y o (odds (S n) {a} rest) os prf
pat a, n, o, os, x, y, rest, prf, fin =>
  atOddIndex {a} (S (S n)) (VCons {_} {_} o os) (VCons {_} {_} x (VCons {_} {_} y rest)) prf (FS (S n) fin)
    = atOddIndex {a} (S n) os rest (tailsEqual {a} (S n) y o (odds (S n) {a} rest) os prf) fin

zipWithCommutesEvens :
  {a,b,c : Type} ->
  (n : Nat) ->
  (f : a -> b -> c) ->
  (xs : Vect (double' n) a) ->
  (ys : Vect (double' n) b) ->
  Equal (Vect n c)
    (zipWith n {_} {_} {_} f (evens n {a} xs) (evens n {b} ys))
    (evens n {c} (zipWith (double' n) {_} {_} {_} f xs ys))
pat a, b, c, f =>
  zipWithCommutesEvens {a} {b} {c} Z f [] [] = Refl {_} {_}
pat a, b, c, n, f x1, x2, xs, y1, y2, ys =>
  zipWithCommutesEvens {a} {b} {c} (S n) f (VCons {_} {_} x1 (VCons {_} {_} x2 xs))
                                           (VCons {_} {_} y1 (VCons {_} {_} y2 ys))
    = eqCong {_} {_} {VCons {_} {_} (f x1 y1)} {_} {_}
        (zipWithCommutesEvens {a} {b} {c} n f xs ys)

atEvenIndices : (n : Nat) ->
                  (i : Fin n) ->
                  Equal (Fin (double' n))
                    (at {_} {_} i (map n {_} {_} (finDouble' {n}) (indices n)))
                    (at {_} {_} i (evens n  {_} (indices (double' n))))
pat n, i =>
  atEvenIndices n i =
    let h1 = Refl {_} {at {_} {_} (finDouble' {n} i) (indices (double' n))}
        h2 = eqInd2 {_} {_} {_} {atIndicesNeutral (double' n) (finDouble' {n} i)}
               {\h => Equal (Fin (double' n))
                        h
                        (at {_} {_} (finDouble' {n} i) (indices (double' n)))
               } h1
        h3 = eqInd2 {_} {_} {_} {atEvenIndex {Fin (double' n)} n (evens n {_} (indices (double' n))) (indices (double' n)) (Refl {_} {_}) i}
               {\h => Equal (Fin (double' n))
                        (finDouble' {n} i)
                        h
               } h2

        g1 = Refl {_} {at {_} {_} i (map n {_} {_} (finDouble' {n}) (indices n))}
        g2 = eqInd2 {_} {_} {_} {atCommutesMap n {_} {_} i (finDouble' {n}) (indices n)}
               {\h => Equal (Fin (double' n))
                        (at {_} {_} i (map n {_} {_} (finDouble' {n}) (indices n)))
                        h
               } g1
        g3 = eqInd2 {_} {_} {_} {atIndicesNeutral n i}
               {\h => Equal (Fin (double' n))
                        (at {_} {_} i (map n {_} {_} (finDouble' {n}) (indices n)))
                        (finDouble' {n} h)
               } g2

    in eqTrans {_} {_} {_} {_} g3 h3
                                   
atOddIndices : (n : Nat) ->
                  (i : Fin n) ->
                  Equal (Fin (double' n))
                    (at {_} {_} i (map n {_} {_} (finSuccDouble' {n}) (indices n)))
                    (at {_} {_} i (odds n  {_} (indices (double' n))))
pat n, i =>
  atOddIndices n i =
    let h1 = Refl {_} {at {_} {_} (finSuccDouble' {n} i) (indices (double' n))}
        h2 = eqInd2 {_} {_} {_} {atIndicesNeutral (double' n) (finSuccDouble' {n} i)}
               {\h => Equal (Fin (double' n))
                        h
                        (at {_} {_} (finSuccDouble' {n} i) (indices (double' n)))
               } h1
        h3 = eqInd2 {_} {_} {_} {atOddIndex {Fin (double' n)} n (odds n {_} (indices (double' n))) (indices (double' n)) (Refl {_} {_}) i}
               {\h => Equal (Fin (double' n))
                        (finSuccDouble' {n} i)
                        h
               } h2

        g1 = Refl {_} {at {_} {_} i (map n {_} {_} (finSuccDouble' {n}) (indices n))}
        g2 = eqInd2 {_} {_} {_} {atCommutesMap n {_} {_} i (finSuccDouble' {n}) (indices n)}
               {\h => Equal (Fin (double' n))
                        (at {_} {_} i (map n {_} {_} (finSuccDouble' {n}) (indices n)))
                        h
               } g1
        g3 = eqInd2 {_} {_} {_} {atIndicesNeutral n i}
               {\h => Equal (Fin (double' n))
                        (at {_} {_} i (map n {_} {_} (finSuccDouble' {n}) (indices n)))
                        (finSuccDouble' {n} h)
               } g2

    in eqTrans {_} {_} {_} {_} g3 h3
                                   


eqForEvens : (n : Nat) -> {a : Type} ->
             (es : Vect n a) ->
             (xs : Vect (double' n) a) ->
             (prfElem : (i : Fin n) ->
                        Equal a (at {a} {n} i es)
                                (at {a} {double' n} (finDouble' {n} i) xs)) ->
             Equal (Vect n a) es (evens n {a} xs)
pat n, a, es, xs, prf =>
  eqForEvens n {a} es xs prf
    = let h1 = \i : Fin n => atEvenIndex {a} n (evens n {a} xs) xs (Refl {_} {_}) i
          h2 = \i : Fin n => eqTrans {_} {_} {_} {_}  (prf i) (h1 i)
          h3 = eqForAllIndices n {a} es (evens n {a} xs) h2
      in h3

eqForOdds : (n : Nat) -> {a : Type} ->
            (os : Vect n a) ->
            (xs : Vect (double' n) a) ->
            (prfElem : (i : Fin n) ->
                       Equal a (at {a} {n} i os)
                               (at {a} {double' n} (finSuccDouble' {n} i) xs)) ->
            Equal (Vect n a) os (odds n {a} xs)
pat n, a, os, xs, prf =>
  eqForOdds n {a} os xs prf
    = let h1 = \i : Fin n => atOddIndex {a} n (odds n {a} xs) xs (Refl {_} {_}) i
          h2 = \i : Fin n => eqTrans {_} {_} {_} {_}  (prf i) (h1 i)
          h3 = eqForAllIndices n {a} os (odds n {a} xs) h2
      in h3

eqSumEvenOdds : (n : Nat) -> (xs : Vect (double' n) ZZ) ->
                Equal ZZ (plusZ (sumZ n (evens n {ZZ} xs)) (sumZ n (odds n {ZZ} xs)))
                         (sumZ (double' n) xs)
eqSumEvenOdds Z [] = Refl {_} {_}
pat a, b =>
  eqSumEvenOdds 1 [a,b] = Refl {_} {_}
pat n, a, b, c, d, rest =>
  eqSumEvenOdds (S (S n)) (VCons {_} {_} a (VCons {_} {_} b (VCons {_} {_} c (VCons {_} {_} d rest))))
    = let h1 = eqCong {_} {_} {\x => plusZ a (plusZ b x)} {_} {_}
                 (eqSumEvenOdds (S n) (VCons {_} {_} c (VCons {_} {_} d rest)))
          h2 = eqInd2 {_} {_} {_} {plusCommutativeZ (sumZ (S n) (VCons {_} {_} c (evens n {_} rest))) (sumZ (S n) (VCons {_} {_} d (odds n {_} rest)))}
                 {\h => Equal ZZ
                          (plusZ a (plusZ b h))
                          (plusZ a (plusZ b (sumZ (double' (S n)) (VCons {_} {_} c (VCons {_} {_} d rest)))))} h1
          h3 = eqInd2 {_} {_} {_} {plusAssociativeZ b (sumZ (S n) (VCons {_} {_} d (odds n {_} rest))) (sumZ (S n) (VCons {_} {_} c (evens n {_} rest))) }
                 {\h => Equal ZZ
                          (plusZ a h)
                          (plusZ a (plusZ b (sumZ (double' (S n)) (VCons {_} {_} c (VCons {_} {_} d rest)))))} h2
          h4 = eqInd2 {_} {_} {_} {plusCommutativeZ (plusZ b (sumZ (S n) (VCons {_} {_} d (odds n {_} rest)))) (sumZ (S n) (VCons {_} {_} c (evens n {_} rest))) }
                 {\h => Equal ZZ
                          (plusZ a h)
                          (plusZ a (plusZ b (sumZ (double' (S n)) (VCons {_} {_} c (VCons {_} {_} d rest)))))} h3
          h5 = eqInd2 {_} {_} {_} {plusAssociativeZ a (sumZ (S n) (VCons {_} {_} c (evens n {_} rest))) (plusZ b (sumZ (S n) (VCons {_} {_} d (odds n {_} rest))))}
                 {\h => Equal ZZ
                          (h)
                          (plusZ a (plusZ b (sumZ (double' (S n)) (VCons {_} {_} c (VCons {_} {_} d rest)))))} h4
      in h5