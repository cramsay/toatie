-- A representation of integer numbers

import Data.Nat
import Proofs

-- An integer is either a positive `Nat` or the negated successor of a `Nat`
data ZZ : Type where
  Pos : Nat -> ZZ
  NegS : Nat -> ZZ

-- Take the absolute value of a `ZZ`
absZ : ZZ -> Nat
pat n =>
  absZ (Pos n) = n
pat n =>
  absZ (NegS n) = S n

-- Take the negation of a `Nat`
negNat : Nat -> ZZ
negNat Z = Pos Z
pat n =>
  negNat (S n) = NegS n

-- Take the negation of a `ZZ`
negateZ : ZZ -> ZZ
negateZ (Pos Z) = Pos Z
pat n =>
  negateZ (Pos (S n)) = NegS n
pat n =>
  negateZ (NegS n) = Pos (S n)

-- Construct a `ZZ` as the difference of two `Nat`s
minusNatZ : Nat -> Nat -> ZZ
pat n =>
  minusNatZ n Z = Pos n
pat m =>
  minusNatZ Z (S m) = NegS m
pat n, m =>
  minusNatZ (S n) (S m) = minusNatZ n m

-- Add two `ZZ`s
plusZ : ZZ -> ZZ -> ZZ
pat n, m =>
  plusZ (Pos  n) (Pos  m) = Pos (plus n m)
pat n, m =>
  plusZ (NegS n) (NegS m) = NegS (S (plus n m))
pat n, m =>
  plusZ (Pos  n) (NegS m) = minusNatZ n (S m)
pat n, m =>
  plusZ (NegS n) (Pos  m) = minusNatZ m (S n)

doubleZ : ZZ -> ZZ
pat k =>
  doubleZ k = plusZ k k

-- Subtract two `ZZ`s
subZ : ZZ -> ZZ -> ZZ
pat n, m =>
  subZ n m = plusZ n (negateZ m)

-- Multiply two `ZZ`s
multZ : ZZ -> ZZ -> ZZ
pat n, m =>
  multZ (Pos  n) (Pos  m) = Pos (mul n m)
pat n, m =>
  multZ (NegS n) (NegS m) = Pos (mul (S n) (S m))
pat n, m =>
  multZ (Pos  n) (NegS m) = negNat (mul n (S m))
pat n, m =>
  multZ (NegS n) (Pos  m) = negNat (mul (S n) m)


{- Proof of properties of `plusZ` -}

plusZeroLeftNeutralZ : (right : ZZ) -> Equal ZZ (plusZ (Pos Z) right) right
pat n =>
  plusZeroLeftNeutralZ (Pos n) = Refl {_} {_}
pat n =>
  plusZeroLeftNeutralZ (NegS n) = Refl {_} {_}

plusZeroRightNeutralZ : (left : ZZ) -> Equal ZZ (plusZ left (Pos Z)) left
pat n =>
  plusZeroRightNeutralZ (Pos n) = eqCong {_} {_} {Pos} {_} {_} (plusZeroRightNeutral n)
pat n =>
  plusZeroRightNeutralZ (NegS n) = Refl {_} {_}

doubleNegElim : (x : ZZ) -> Equal ZZ (negateZ (negateZ x)) x
doubleNegElim (Pos Z) = Refl {_} {_}
pat n =>
  doubleNegElim (Pos (S n)) = Refl {_} {_}
pat n => 
  doubleNegElim (NegS n) = Refl {_} {_}

plusCommutativeZ : (left : ZZ) -> (right : ZZ) -> Equal ZZ (plusZ left right) (plusZ right left)
pat n, m =>
  plusCommutativeZ (Pos n) (Pos m) = eqCong {_} {_} {Pos} {_} {_} (plusCommutative n m)
pat n, m =>
  plusCommutativeZ (Pos n) (NegS m) = Refl {_} {_}
pat n, m =>
  plusCommutativeZ (NegS n) (Pos m) = Refl {_} {_}
pat n, m =>
  plusCommutativeZ (NegS n) (NegS m)
    = eqCong {_} {_} {NegS} {_} {_} (
       eqCong {_} {_} {S} {_} {_} (plusCommutative n m)
      )
                                         
-- We're going to put in quite a bit of work below to show the associativity of `plusZ`
-- bare with us...

minusNatZAntiCommutative : (j, k : Nat) -> Equal ZZ (negateZ (minusNatZ j k)) (minusNatZ k j)
minusNatZAntiCommutative Z Z = Refl {_} {_}
pat k =>
  minusNatZAntiCommutative Z (S k) = Refl {_} {_}
pat j =>
  minusNatZAntiCommutative (S j) Z = Refl {_} {_}
pat j, k =>
  minusNatZAntiCommutative (S j) (S k) = minusNatZAntiCommutative j k

negateDistributesPlus : (a, b : ZZ) -> Equal ZZ (negateZ (plusZ a b)) (plusZ (negateZ a) (negateZ b))
pat b =>
  negateDistributesPlus (Pos Z) b = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusZeroLeftNeutralZ b)) {\x=> Equal ZZ (negateZ x) (plusZ (negateZ (Pos 0)) (negateZ b)) } (
                                      eqInd _ {_} {_} (plusZeroLeftNeutralZ (negateZ b)) {\x=> Equal ZZ x (plusZ (negateZ (Pos 0)) (negateZ b))}
                                        (Refl {_} {plusZ (negateZ (Pos 0)) (negateZ b)})
                                    )
pat k =>
  negateDistributesPlus (Pos (S k)) (Pos Z) = eqInd _ {_} {_} (plusZeroRightNeutral k)
                                                {\x => Equal ZZ (NegS (plus k 0)) (NegS x)}
                                                (Refl {_} {_})
pat k, j =>
  negateDistributesPlus (Pos (S k)) (Pos (S j))
    = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc k j))
                      {\x => Equal ZZ (NegS (plus k (S j))) (NegS x)}
                      (Refl {ZZ} {NegS (plus k (S j))})
pat k, j =>
  negateDistributesPlus (Pos (S k)) (NegS j) = minusNatZAntiCommutative k j
pat k =>
  negateDistributesPlus (NegS k) (Pos Z)
    = eqInd _ {_} {_} (plusZeroRightNeutral k)
                      {\x => Equal ZZ (Pos (S x)) (Pos (S (plus k 0)))}
                      (Refl {_} {_})
pat k, j =>
  negateDistributesPlus (NegS k) (Pos (S j)) = minusNatZAntiCommutative j k
pat k, j =>
  negateDistributesPlus (NegS k) (NegS j)
    = eqInd _ {_} {_} (plusSuccRightSucc k j)
                      {\x => Equal ZZ (Pos (S (S (plus k j)))) (Pos (S (x)))}
                      (Refl {_} {_})

lemmaMinusSucc : (k, j, i : Nat) -> Equal ZZ (plusZ (minusNatZ k (S j)) (Pos i))
                                             (plusZ (minusNatZ k (S (S j))) (Pos (S i)))
pat j, i =>
  lemmaMinusSucc Z j i = Refl {_} {_}
pat i  =>
  lemmaMinusSucc (S Z) Z i = Refl {_} {_}
pat k, i =>
  lemmaMinusSucc (S (S k)) Z i
    = eqInd _ {_} {_} (plusSuccRightSucc k i)
                      {\x:Nat => Equal ZZ (Pos (S (plus k i))) (Pos x)}
                      (Refl {_} {_})
pat k, j, i =>
  lemmaMinusSucc (S k) (S j) i = lemmaMinusSucc k j i

lemmaAssocNegation : (k : Nat) -> (c, r : ZZ) ->
                     Equal ZZ (plusZ (Pos (S k)) (plusZ c r))
                              (plusZ (plusZ (Pos (S k)) c) r) ->
                     Equal ZZ (plusZ (NegS k) (plusZ (negateZ c) (negateZ r)))
                              (plusZ (plusZ (NegS k) (negateZ c)) (negateZ r))
pat k, c, r, prf =>
  lemmaAssocNegation k c r prf
    = let h1 = eqCong {_} {_} {negateZ} {_} {_} prf  
          h2 = eqInd _ {_} {_} (negateDistributesPlus (plusZ (Pos (S k)) c) r)
                               {\x => Equal ZZ (negateZ (plusZ (Pos (S k)) (plusZ c r))) x}
                               h1
          h3 = eqInd _ {_} {_} (negateDistributesPlus (Pos (S k)) c)
                               {\x => Equal ZZ (negateZ (plusZ (Pos (S k)) (plusZ c r)))
                                               (plusZ x (negateZ r))}
                               h2
          h4 = eqInd _ {_} {_} (negateDistributesPlus (Pos (S k)) (plusZ c r))
                               {\x => Equal ZZ x
                                               (plusZ (plusZ (NegS k) (negateZ c)) (negateZ r))}
                               h3
          h5 = eqInd _ {_} {_} (negateDistributesPlus c r)
                               {\x => Equal ZZ (plusZ (NegS k) x)
                                               (plusZ (plusZ (NegS k) (negateZ c)) (negateZ r))}
                               h4
      in h5

lemmaAssocPos : (k : Nat) -> (c, r : ZZ) -> Equal ZZ (plusZ (Pos k) (plusZ c r))
                                                     (plusZ (plusZ (Pos k) c) r)
pat k, j, i =>
  lemmaAssocPos k     (Pos j)      (Pos i) 
    = eqCong {_} {_} {Pos} {_} {_} (plusAssociative k j i)
pat k, i =>
  lemmaAssocPos k     (Pos Z)      (NegS i) 
    = eqInd _ {_} {_} (plusZeroRightNeutral k)
                      {\x => Equal ZZ (minusNatZ x (S i))
                                      (minusNatZ (plus k 0) (S i))}
                      (Refl {_} {_})
pat k, j =>
  lemmaAssocPos k     (Pos (S j))  (NegS Z) 
    = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc k j))
                      {\x => Equal ZZ (minusNatZ x 1) (minusNatZ (plus k (S j)) 1)}
                      (Refl {_} {_})
pat k, j, i =>
  lemmaAssocPos k     (Pos (S j))  (NegS (S i)) 
    = let 
          h0 = Refl {ZZ} {minusNatZ (plus k (S j)) (S (S i))}
          h1 : Equal ZZ (minusNatZ (plus k j) (S i))
                        (minusNatZ (plus k (S j)) (S (S i)))
             = eqInd _ {_} {_} (eqSym {_} {_} {_} (plusSuccRightSucc k j))
                                {\x => Equal ZZ (minusNatZ x (S (S i)))
                                                (minusNatZ (plus k (S j)) (S (S i)))}
                                h0
          ind = lemmaAssocPos k (Pos j) (NegS i)
          h2  = eqInd _ {_} {_} (eqSym {_} {_} {_} ind)
                                {\x => Equal ZZ x (minusNatZ (plus k (S j)) (S (S i)))}
                                h1
      in h2
pat k, j =>
  lemmaAssocPos k     (NegS j)     (Pos Z) 
    = eqInd _ {_} {_} (plusZeroRightNeutralZ (minusNatZ k (S j)))
                      {\x => Equal ZZ x (plusZ (minusNatZ k (S j)) (Pos 0))}
                      (Refl {_} {_})
pat i =>
  lemmaAssocPos Z     (NegS Z)     (Pos (S i)) 
    = Refl {_} {_}
pat k, i =>
  lemmaAssocPos (S k) (NegS Z)     (Pos (S i)) 
    = eqInd _ {_} {_} (plusSuccRightSucc k i)
                      {\x => Equal ZZ (Pos (S (plus k i))) (Pos x) }
                      (Refl {_} {_})
pat k, j, i =>
  lemmaAssocPos k     (NegS (S j)) (Pos (S i)) 
    = let h0 = eqSym {_} {_} {_} (lemmaAssocPos k (NegS j) (Pos i))
          h1 = lemmaMinusSucc k j i
          h2 = eqInd _ {_} {_} h0
                               {\x => Equal ZZ x (plusZ (minusNatZ k (S (S j))) (Pos (S i)))}
                               h1
      in h2
pat j, i =>
  lemmaAssocPos Z     (NegS j)     (NegS i) 
    = Refl {_} {_}
pat k, i =>
  lemmaAssocPos (S k) (NegS Z)     (NegS i) 
    = Refl {_} {_}
pat k, j, i =>
  lemmaAssocPos (S k) (NegS (S j)) (NegS i) 
    = lemmaAssocPos k (NegS j) (NegS i)

plusAssociativeZ : (l, c, r : ZZ) -> Equal ZZ (plusZ l (plusZ c r))
                                              (plusZ (plusZ l c) r)
pat k, c, r =>
  plusAssociativeZ (Pos k) c r = lemmaAssocPos k c r
pat k, c, r =>
  plusAssociativeZ (NegS k) c r
    = let h1 = lemmaAssocNegation k (negateZ c) (negateZ r) (lemmaAssocPos (S k) (negateZ c) (negateZ r))
          h2 = eqInd _ {_} {_} (doubleNegElim c)
                               {\x => Equal ZZ (plusZ (NegS k) (plusZ x (negateZ (negateZ r))))
                                               (plusZ (plusZ (NegS k) x) (negateZ (negateZ r)))}
                               h1
          h3 = eqInd _ {_} {_} (doubleNegElim r)
                               {\x => Equal ZZ (plusZ (NegS k) (plusZ c x))
                                               (plusZ (plusZ (NegS k) c) x)}
                               h2
      in h3

{- Proof of properties of subtraction -}

lemmaMinusSymZero : (k : Nat) -> Equal ZZ (minusNatZ k k) (Pos 0)
lemmaMinusSymZero Z = Refl {_} {_}
pat k =>
  lemmaMinusSymZero (S k) = lemmaMinusSymZero k

plusNegateInverseLZ : (a : ZZ) -> Equal ZZ (plusZ a (negateZ a)) (Pos 0)
plusNegateInverseLZ (Pos Z) = Refl {_} {_}
pat k =>
  plusNegateInverseLZ (Pos (S k)) = lemmaMinusSymZero k
pat k =>
  plusNegateInverseLZ (NegS k) = lemmaMinusSymZero k

plusNegateInverseRZ : (a : ZZ) -> Equal ZZ (plusZ (negateZ a) a) (Pos 0)
plusNegateInverseRZ (Pos Z) = Refl {_} {_}
pat k =>
  plusNegateInverseRZ (Pos (S k)) = lemmaMinusSymZero k
pat k =>
  plusNegateInverseRZ (NegS k) = lemmaMinusSymZero k

subDoubleNegate : (a : ZZ) -> Equal ZZ (subZ a (plusZ a a)) (negateZ a)
pat a =>
  subDoubleNegate a
    = let h1 = eqInd2 {_} {_} {_} {negateDistributesPlus a a}
                 {\x => Equal ZZ (subZ a (plusZ a a))
                                 (plusZ a (x))}
                 (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {plusAssociativeZ a (negateZ a) (negateZ a)}
                 {\x => Equal ZZ (subZ a (plusZ a a)) x} h1
          h3 = eqInd2 {_} {_} {_} {plusNegateInverseLZ a}
                 {\x => Equal ZZ (subZ a (plusZ a a))
                                 (plusZ x (negateZ a))} h2
      in eqInd2 {_} {_} {_} {plusZeroLeftNeutralZ (negateZ a)}
           {\x => Equal ZZ (subZ a (plusZ a a)) x} h3

plusPlusAssociativeZ : (a,b,c,d : ZZ) -> Equal ZZ (plusZ (plusZ a b) (plusZ c d))
                                                  (plusZ (plusZ a c) (plusZ b d))
pat a,b,c,d =>
  plusPlusAssociativeZ a b c d
    = let h1 = Refl {ZZ} {plusZ (plusZ a b) (plusZ c d)}
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociativeZ a b (plusZ c d))}
                                  {\n => Equal ZZ (plusZ (plusZ a b) (plusZ c d)) n} h1
          h3 = eqInd2 {_} {_} {_} {plusCommutativeZ b (plusZ c d)}
                                  {\n => Equal ZZ (plusZ (plusZ a b) (plusZ c d)) (plusZ a n)} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociativeZ c d b)}
                                  {\n => Equal ZZ (plusZ (plusZ a b) (plusZ c d)) (plusZ a n)} h3
          h5 = eqInd2 {_} {_} {_} {plusCommutativeZ d b}
                                  {\n => Equal ZZ (plusZ (plusZ a b) (plusZ c d)) (plusZ a (plusZ c n))} h4
          h6 = eqInd2 {_} {_} {_} {plusAssociativeZ a c (plusZ b d)}
                                  {\n => Equal ZZ (plusZ (plusZ a b) (plusZ c d)) n} h5
      in h6

plusLeftImpliesRHSSub : (a, b, c : ZZ) -> Equal ZZ (plusZ a b) c -> Equal ZZ a (subZ c b)
pat a, b, c, prf =>
  plusLeftImpliesRHSSub a b c prf
    = let h1 = eqCong {_} {_} {\x => subZ x b} {_} {_}  prf
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociativeZ a b (negateZ b))}
                                  {\x => Equal ZZ x (subZ c b)} h1
          h3 = eqInd2 {_} {_} {_} {plusNegateInverseLZ b}
                                  {\x => Equal ZZ (plusZ a x) (subZ c b)} h2
          h4 = eqInd2 {_} {_} {_} {plusZeroRightNeutralZ a}
                                  {\x => Equal ZZ x (subZ c b)}  h3
      in h4

{- Proof of properties of multiplication -}

multZeroLeftZeroZ : (right : ZZ) -> Equal ZZ (multZ (Pos Z) right) (Pos Z)
pat k => multZeroLeftZeroZ (Pos  k) = Refl {_} {_}
pat k => multZeroLeftZeroZ (NegS k) = Refl {_} {_}

multZeroRightZeroZ : (left : ZZ) -> Equal ZZ (multZ left (Pos Z)) (Pos Z)
pat k => multZeroRightZeroZ (Pos  k) = eqCong {_} {_} {Pos} {_} {_} (mulZeroRightZero k)
pat k => multZeroRightZeroZ (NegS k) = eqInd2 {_} {_} {_} {mulZeroRightZero k}
                                         {\h => Equal ZZ (negNat (mul k 0)) (negNat h)}
                                         (Refl {_} {_})

multOneLeftNeutralZ : (right : ZZ) -> Equal ZZ (multZ (Pos 1) right) right
pat k =>
  multOneLeftNeutralZ (Pos  k) = eqCong {_} {_} {Pos} {_} {_} (mulOneLeftNeutral k)
pat k =>
  multOneLeftNeutralZ (NegS k) = eqCong {_} {_} {NegS} {_} {_} (mulOneLeftNeutral k)

multOneRightNeutralZ : (left : ZZ) -> Equal ZZ (multZ left (Pos 1)) left
pat k =>
  multOneRightNeutralZ (Pos  k) = eqCong {_} {_} {Pos} {_} {_} (mulOneRightNeutral k)
pat k =>
  multOneRightNeutralZ (NegS k) = eqCong {_} {_} {NegS} {_} {_} (mulOneRightNeutral k)

multCommutativeZ : (left, right : ZZ) -> Equal ZZ (multZ left right) (multZ right left)
pat k, j =>
  multCommutativeZ (Pos  k) (Pos  j) = eqCong {_} {_} {Pos} {_} {_} (mulCommutative k j)
pat k, j =>
  multCommutativeZ (Pos  k) (NegS j) = eqCong {_} {_} {negNat} {_} {_} (mulCommutative k (S j))
pat k, j =>
  multCommutativeZ (NegS k) (Pos  j) = eqCong {_} {_} {negNat} {_} {_} (mulCommutative (S k) j)
pat k, j =>
  multCommutativeZ (NegS k) (NegS j) = eqCong {_} {_} {Pos} {_} {_} (mulCommutative (S k) (S j))

lemmaPosMultNegNat : (k, j : Nat) -> Equal ZZ (multZ (Pos k) (negNat j)) (negNat (mul k j))
pat k =>
  lemmaPosMultNegNat k Z = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulZeroRightZero k)}
                             {\h => Equal ZZ (Pos h) (negNat h)}
                             (Refl {_} {_})
pat k, j =>
  lemmaPosMultNegNat k (S j) = Refl {_} {_}

lemmaNegNatMultPos : (k, j : Nat) -> Equal ZZ (multZ (negNat k) (Pos j)) (negNat (mul k j))
pat k, j =>
  lemmaNegNatMultPos k j = let h1 = Refl {_} {negNat (mul k j)}
                               h2 = eqInd2 {_} {_} {_} {mulCommutative k j}
                                      {\h => Equal ZZ (negNat h)
                                                      (negNat (mul k j))} h1
                               h3 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (lemmaPosMultNegNat j k)}
                                      {\h => Equal ZZ h
                                                      (negNat (mul k j))} h2
                           in eqInd2 {_} {_} {_} {multCommutativeZ (Pos j) (negNat k)}
                                     {\h => Equal ZZ h
                                                      (negNat (mul k j))} h3

lemmaNegMultNegNat : (k, j : Nat) -> Equal ZZ (multZ (negNat k) (NegS j)) (multZ (Pos k) (Pos (S j)))
pat j =>
  lemmaNegMultNegNat Z j = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulZeroLeftZero j)}
                             {\h => Equal ZZ (negNat h) (Pos h)}
                             (Refl {_} {_})
pat j, k =>
  lemmaNegMultNegNat (S k) j = Refl {_} {_}

lemmaNegatePosNegNat : (k : Nat) -> Equal ZZ (negateZ (Pos k)) (negNat k)
lemmaNegatePosNegNat Z = Refl {_} {_}
pat k =>
  lemmaNegatePosNegNat (S k) = Refl {_} {_}

multNegLeftZ : (k : Nat) -> (j : ZZ) -> Equal ZZ (multZ (NegS k) j) (negateZ (multZ (Pos (S k)) j))
pat k, j =>
  multNegLeftZ k (Pos j) = eqSym {_} {_} {_} (lemmaNegatePosNegNat (mul (S k) j))
pat k, j =>
  multNegLeftZ k (NegS j) = Refl {_} {_}

multNegateLeftZ : (k, j : ZZ) -> Equal ZZ (multZ (negateZ k) j) (negateZ (multZ k j))
pat j =>
  multNegateLeftZ (Pos Z) j = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multZeroLeftZeroZ j)}
                             {\h => Equal ZZ h (negateZ h)}
                             (Refl {_} {_}) 
pat k, j =>
  multNegateLeftZ (Pos (S k)) (Pos j) = eqSym {_} {_} {_} (lemmaNegatePosNegNat (mul (S k) j))
pat k, j =>
  multNegateLeftZ (Pos (S k)) (NegS j) = Refl {_} {_}
pat k, j =>
  multNegateLeftZ (NegS k) j = let h1 = multNegLeftZ k j
                                   h2 = eqInd2 {_} {_} {_} {h1}
                                          {\h => Equal ZZ (negateZ h) (negateZ (multZ (NegS k) j))}
                                          (Refl {_} {_})
                               in eqInd2 {_} {_} {_} {doubleNegElim (multZ (Pos (S k)) j)}
                                    {\h => Equal ZZ h (negateZ (multZ (NegS k) j))} h2

multAssociativeZPos : (k : Nat) -> (c, r : ZZ) -> Equal ZZ (multZ (Pos k) (multZ c r))
                                                           (multZ (multZ (Pos k) c) r)
pat k, j, i =>
  multAssociativeZPos k (Pos  j) (Pos  i) = eqCong {_} {_} {Pos} {_} {_} (mulAssociative k j i)
pat k, j, i =>
  multAssociativeZPos k (Pos  j) (NegS i)
    = let h1 = lemmaPosMultNegNat k (mul j (S i))
      in eqInd2 {_} {_} {_} {mulAssociative k j (S i)}
           {\h => Equal ZZ (multZ (Pos k) (negNat (mul j (S i))))
                           (negNat h)} h1
pat k, j, i =>
  multAssociativeZPos k (NegS j) (Pos  i)
    = let h1 = Refl {_} {multZ (Pos k) (negNat (mul (S j) i))}
          h2 = eqInd2 {_} {_} {_} {lemmaPosMultNegNat k (mul (S j) i)}
                 {\h => Equal ZZ (multZ (Pos k) (negNat (mul (S j) i)))
                                 h} h1
          h3 = eqInd2 {_} {_} {_} {mulAssociative k (S j) i}
                 {\h => Equal ZZ (multZ (Pos k) (negNat (mul (S j) i)))
                                 (negNat h)} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (lemmaNegNatMultPos (mul k (S j)) i)}
                 {\h => Equal ZZ (multZ (Pos k) (negNat (mul (S j) i)))
                                 h} h3
      in h4
pat k, j, i =>
  multAssociativeZPos k (NegS j) (NegS i)
    = let h1 = Refl {_} {multZ (multZ (Pos k) (NegS j)) (NegS i)}
          h2 = eqInd2 {_} {_} {_} {lemmaNegMultNegNat (mul k (S j)) i}
                 {\h => Equal ZZ h
                                 (multZ (multZ (Pos k) (NegS j)) (NegS i))}
                 h1
      in eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulAssociative k (S j) (S i))}
           {\h => Equal ZZ (Pos h)
                           (multZ (multZ (Pos k) (NegS j)) (NegS i))}
           h2

multAssociativeZ : (l, c, r : ZZ) -> Equal ZZ (multZ l (multZ c r)) (multZ (multZ l c) r)
pat k, c, r =>
  multAssociativeZ (Pos k) c r = multAssociativeZPos k c r
pat k, c, r =>
  multAssociativeZ (NegS k) c r
    = let h1 = eqCong {_} {_} {negateZ} {_} {_} (multAssociativeZPos (S k) c r)
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegLeftZ k (multZ c r))}
                 {\h => Equal ZZ h
                                 (negateZ (multZ (multZ (Pos (S k)) c) r))} h1
          h3 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegateLeftZ (multZ (Pos (S k)) c) r)}
                 {\h => Equal ZZ (multZ (NegS k) (multZ c r))
                                 h} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegLeftZ k c)}
                 {\h => Equal ZZ (multZ (NegS k) (multZ c r))
                                 (multZ h r)} h3
      in h4


lemmaPlusPosNegCancel : (k, j, i : Nat) -> Equal ZZ (plusZ (Pos (plus k j)) (negNat (plus k i)))
                                                    (plusZ (Pos j) (negNat i))
pat j, i =>
  lemmaPlusPosNegCancel Z j i = Refl {_} {_}
pat j =>
  lemmaPlusPosNegCancel (S Z) j Z = eqCong {_} {_} {Pos} {_} {_} (eqSym {_} {_} {_} (plusZeroRightNeutral j))
pat j, i =>
  lemmaPlusPosNegCancel (S Z) j (S i) = Refl {_} {_}
pat k, j, i =>
  lemmaPlusPosNegCancel (S (S k)) j i = lemmaPlusPosNegCancel (S k) j i

lemmaPlusPosNegZero : (k : Nat) -> Equal ZZ (plusZ (Pos k) (negNat k)) (Pos Z)
lemmaPlusPosNegZero Z = Refl {_} {_}
pat k =>
  lemmaPlusPosNegZero (S k) = lemmaMinusSymZero k

negNatDistributesPlus : (j, k : Nat) -> Equal ZZ (plusZ (negNat j) (negNat k))
                                                 (negNat (plus j k))
pat k =>
  negNatDistributesPlus Z k = plusZeroLeftNeutralZ (negNat k)
pat j =>
  negNatDistributesPlus (S j) Z = eqCong {_} {_} {NegS} {_} {_}
                                    (eqSym {_} {_} {_} (plusZeroRightNeutral j))
pat j, k =>
  negNatDistributesPlus (S j) (S k) = eqCong {_} {_} {NegS} {_} {_}
                                        (plusSuccRightSucc j k)

multDistributesOverPlusRightPosPosZ : (l, c : Nat) -> (r : ZZ) ->
                                      Equal ZZ (multZ (Pos l) (plusZ (Pos c) r))
                                               (plusZ (multZ (Pos l) (Pos c)) (multZ (Pos l) r))
pat l, c, i =>
  multDistributesOverPlusRightPosPosZ l c (Pos i)
    = eqCong {_} {_} {Pos} {_} {_} (mulDistributesOverPlusRight l c i)

pat l, i =>
  multDistributesOverPlusRightPosPosZ l Z (NegS i)
    = let h1 = eqSym {_} {_} {_} (plusZeroLeftNeutralZ (negNat (mul l (S i))))
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulZeroRightZero l)}
                 {\h => Equal ZZ (negNat (mul l (S i)))
                                 (plusZ (Pos h) (negNat (mul l (S i))))} h1
      in h2

pat l, c =>
  multDistributesOverPlusRightPosPosZ l (S c) (NegS Z)
    = let h1 = Refl {_} {plusZ (Pos (mul l (S c))) (negNat (mul l 1))}
          h2 = eqInd2 {_} {_} {_} {mulOneRightNeutral l}
                 {\h => Equal ZZ (plusZ (Pos (mul l (S c))) (negNat h))
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h1
          h3 = eqInd2 {_} {_} {_} {mulRightSuccPlus l c}
                 {\h => Equal ZZ (plusZ (Pos h) (negNat l))
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h2
          h4 = eqInd2 {_} {_} {_} {plusCommutative l (mul l c)}
                 {\h => Equal ZZ (plusZ (Pos h) (negNat l))
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h3
          h5 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusAssociativeZ (Pos (mul l c)) (Pos l) (negNat l))}
                 {\h => Equal ZZ h
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h4
          h6 = eqInd2 {_} {_} {Pos 0} {lemmaPlusPosNegZero l}
                 {\h => Equal ZZ (plusZ (Pos (mul l c)) h)
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h5
          h7 = eqInd2 {_} {_} {_} {plusZeroRightNeutralZ (Pos (mul l c))}
                 {\h => Equal ZZ h
                                 (plusZ (Pos (mul l (S c))) (negNat (mul l 1)))} h6
      in h7

pat l, c, i =>
  multDistributesOverPlusRightPosPosZ l (S c) (NegS (S i))
    = let h1 = multDistributesOverPlusRightPosPosZ l c (NegS i)
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (lemmaPlusPosNegCancel l (mul l c) (mul l (S i)))}
                 {\h => Equal ZZ (multZ (Pos l) (plusZ (Pos c) (NegS i))) h} h1
          h3 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulRightSuccPlus l c)}
                 {\h => Equal ZZ (multZ (Pos l) (plusZ (Pos c) (NegS i)))
                                 (plusZ (Pos h) (negNat (plus l (mul l (S i)))))
                 } h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulRightSuccPlus l (S i))}
                 {\h => Equal ZZ (multZ (Pos l) (plusZ (Pos c) (NegS i)))
                                 (plusZ (Pos (mul l (S c))) (negNat h))
                 } h3
      in h4

multDistributesOverPlusRightPosZ : (k : Nat) -> (c, r : ZZ) -> Equal ZZ (multZ (Pos k) (plusZ c r))
                                                                        (plusZ (multZ (Pos k) c) (multZ (Pos k) r))
pat k j r =>
  multDistributesOverPlusRightPosZ k (Pos j) r
    = multDistributesOverPlusRightPosPosZ k j r
pat k j i =>
  multDistributesOverPlusRightPosZ k (NegS j) (Pos i)
    = let h1 = multDistributesOverPlusRightPosPosZ k i (NegS j)
      in eqInd2 {_} {_} {_} {plusCommutativeZ (Pos (mul k i)) (negNat (mul k (S j)))}
           {\h => Equal ZZ (multZ (Pos k) (plusZ (NegS j) (Pos i)))
                            h} h1
pat k j i =>
  multDistributesOverPlusRightPosZ k (NegS j) (NegS i)
    = let h1 = Refl {_} {negNat (mul k (S (plus (S j) i)))}
          h2 = eqInd2 {_} {_} {_} {plusSuccRightSucc (S j) i} 
                 {\h => Equal ZZ (negNat (mul k (S (plus (S j) i))))
                                 (negNat (mul k h))} h1
          h3 = eqInd2 {_} {_} {_} {mulDistributesOverPlusRight k (S j) (S i)} 
                 {\h => Equal ZZ (negNat (mul k (S (plus (S j) i))))
                                 (negNat h)} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (negNatDistributesPlus (mul k (S j)) (mul k (S i)))}
                 {\h => Equal ZZ (negNat (mul k (S (plus (S j) i))))
                                 h} h3
      in h4

multDistributesOverPlusRightZ : (l, c, r : ZZ) -> Equal ZZ (multZ l (plusZ c r))
                                                           (plusZ (multZ l c) (multZ l r))
pat k, c, r =>
  multDistributesOverPlusRightZ (Pos k) c r = multDistributesOverPlusRightPosZ k c r
pat k, c, r =>
  multDistributesOverPlusRightZ (NegS k) c r
    = let h1 = eqCong {_} {_} {negateZ} {_} {_} (multDistributesOverPlusRightPosZ (S k) c r)
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegLeftZ k (plusZ c r))}
                 {\h => Equal ZZ h (negateZ (plusZ (multZ (Pos (S k)) c) (multZ (Pos (S k)) r)))} h1
          h3 = eqInd2 {_} {_} {_} {negateDistributesPlus (multZ (Pos (S k)) c) (multZ (Pos (S k)) r)}
                 {\h => Equal ZZ (multZ (NegS k) (plusZ c r)) h} h2
          h4 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegLeftZ k c)}
                 {\h => Equal ZZ (multZ (NegS k) (plusZ c r)) (plusZ h (negateZ (multZ (Pos (S k)) r)))} h3
          h5 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (multNegLeftZ k r)}
                 {\h => Equal ZZ (multZ (NegS k) (plusZ c r)) (plusZ (multZ (NegS k) c) h)} h4
      in h5

multDistributesOverPlusLeftZ : (l, c, r : ZZ) -> Equal ZZ (multZ (plusZ l c) r) (plusZ (multZ l r) (multZ c r))
pat l, c, r =>
  multDistributesOverPlusLeftZ l c r
    = let h1 = multDistributesOverPlusRightZ r l c
          h2 = eqInd2 {_} {_} {_} {multCommutativeZ r (plusZ l c)}
                 {\h => Equal ZZ h (plusZ (multZ r l) (multZ r c))} h1
          h3 = eqInd2 {_} {_} {_} {multCommutativeZ r l}
                 {\h => Equal ZZ (multZ (plusZ l c) r) (plusZ h (multZ r c))} h2
          h4 = eqInd2 {_} {_} {_} {multCommutativeZ r c}
                 {\h => Equal ZZ (multZ (plusZ l c) r) (plusZ (multZ l r) h)} h3
      in h4

multNeg1LeftIsNegateZ : (x : ZZ) -> Equal ZZ (multZ (NegS 0) x) (negateZ x)
multNeg1LeftIsNegateZ (Pos 0) = Refl {_} {_}
pat x =>
  multNeg1LeftIsNegateZ (Pos (S x)) = eqCong {_} {_} {NegS} {_} {_} (plusZeroRightNeutral x)
pat x =>
  multNeg1LeftIsNegateZ (NegS x) = eqCong {_} {_} {\x => Pos (S x)} {_} {_} (plusZeroRightNeutral x)