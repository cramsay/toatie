import Data.Nat
import Data.Signed
import Data.Vect_ -- This version of Vect is a parameter type, so we can have types who depend on its values
import Proofs

-- A heterogeneous vector to hold a collection of signed numbers with different
-- type-level natural number encodings

simple HWords : (n: Nat) -> Vect n Nat -> Vect n ZZ -> Type where
  HNil : HWords 0 [] []
  HCons : {n, w : Nat} ->
          {ws : Vect n Nat} ->
          {val : ZZ} ->
          {vals : Vect n ZZ} ->
          Signed w val ->
          HWords n ws vals ->
          HWords (S n) (VCons {Nat} {n} w ws) (VCons {ZZ} {n} val vals)

evensH : (n : Nat) -> {ws : Vect (double' n) Nat} -> {xs : Vect (double' n) ZZ} ->
         < HWords (double' n) ws xs > ->
         < HWords n (evens n {Nat} ws) (evens n {ZZ} xs) >
pat bs =>
  evensH Z {[]} {[]} bs = [| HNil |]
pat n, w1, w2, ws, x1, x2, xs, b1, b2, bs =>
  evensH (S n) {VCons {_} {_} w1 (VCons {_} {_} w2 ws)} {VCons {_} {_} x1 (VCons {_} {_} x2 xs)}
               [| HCons {_} {_} {_} {_} {_} b1 (HCons {_} {_} {_} {_} {_} b2 bs) |]
    = [| HCons {_} {_} {_} {_} {_} b1 ~(evensH n {ws} {xs} [| bs |]) |]

oddsH : (n : Nat) -> {ws : Vect (double' n) Nat} -> {xs : Vect (double' n) ZZ} ->
         < HWords (double' n) ws xs > ->
         < HWords n (odds n {Nat} ws) (odds n {ZZ} xs) >
pat bs =>
  oddsH Z {[]} {[]} bs = [| HNil |]
pat n, w1, w2, ws, x1, x2, xs, b1, b2, bs =>
  oddsH (S n) {VCons {_} {_} w1 (VCons {_} {_} w2 ws)} {VCons {_} {_} x1 (VCons {_} {_} x2 xs)}
               [| HCons {_} {_} {_} {_} {_} b1 (HCons {_} {_} {_} {_} {_} b2 bs) |]
    = [| HCons {_} {_} {_} {_} {_} b2 ~(oddsH n {ws} {xs} [| bs |]) |]

-- ZipWith where width and nat-encoding types are computed independently of each other
zipWithH : (n  : Nat) ->
           (xws, yws : Vect n Nat) ->
           {xvs, yvs : Vect n ZZ} ->
           {fW : Nat -> Nat -> Nat} ->
           {fV : ZZ -> ZZ -> ZZ } ->
           (f : (xw, yw : Nat) -> {xv, yv : ZZ} ->
                 < Signed xw xv > ->
                 < Signed yw yv > ->
                 < Signed (fW xw yw) (fV xv yv)>) ->
           < HWords n xws xvs > ->
           < HWords n yws yvs > ->
           < HWords n (zipWith n {_} {_} {_} fW xws yws) (zipWith n {_} {_} {_} fV xvs yvs) >
           
pat fW, fV, fn, bx, by =>
  zipWithH Z [] [] {[]} {[]} {fW} {fV} fn bx by = [| HNil |]

pat n, xw, xws, yw, yws, xv, xvs, yv, yvs, fW, fV, f, bx, bxs, by, bys =>
  zipWithH (S n) (VCons {_} {_} xw xws) (VCons {_} {_} yw yws)
                 {VCons {_} {_} xv xvs} {VCons {_} {_} yv yvs} {fW} {fV} f
                 [| HCons {_} {_} {_} {_} {_} bx bxs |]
                 [| HCons {_} {_} {_} {_} {_} by bys |]
    = [| let head = ~(f xw yw {xv} {yv} [|bx|] [|by|])
             tail = ~(zipWithH n xws yws {xvs} {yvs} {fW} {fV} f [|bxs|] [|bys|])
         in HCons {_} {_} {_} {_} {_} head tail 
      |]

-- ZipWith a "constant" vector (i.e. available before circuit run-time)
zipWithConstH :
  (n  : Nat) ->
  {a : Type} ->
  (ws : Vect n Nat) ->
  {vs : Vect n ZZ} ->
  {fW : a -> Nat -> Nat} ->
  {fV : a -> ZZ -> ZZ} ->
  (f : (xw : Nat) -> {xv : ZZ} -> (c :a) ->
       < Signed xw xv > -> < Signed (fW c xw) (fV c xv) >) ->
  (cs : Vect n a) ->
  < HWords n ws vs > ->
  < HWords n (zipWith n {_} {_} {_} fW cs ws) (zipWith n {_} {_} {_} fV cs vs) >
pat a, fW, fV, f, bs =>
  zipWithConstH Z {a} [] {[]} {fW} {fV} f [] bs = [| HNil |]
pat n, a, w, ws, v, vs, fW, fV, f, c, cs, b, bs =>
  zipWithConstH (S n) {a} (VCons {_} {_} w ws) {VCons {_} {_} v vs} {fW} {fV} f
                          (VCons {_} {_} c cs) [| HCons {_} {_} {_} {_} {_} b bs |]
    = [| let head = ~(f w {v} c [|b|])
             tail = ~(zipWithConstH n {a} ws {vs} {fW} {fV} f cs [|bs|])
         in HCons {_} {_} {_} {_} {_} head tail
      |]

snocH : (n  : Nat) ->
        {ws : Vect n Nat} ->
        {xs : Vect n ZZ} ->
        {w : Nat} ->
        {x : ZZ} ->
        < HWords n ws xs > ->
        < Signed w x > ->
        < HWords (S n) (snoc {_} {_} ws w) (snoc {_} {_} xs x) >
pat w, x, bs, b =>
  snocH Z {[]} {[]} {w} {x} bs b = [| HCons {_} {_} {_} {_} {_} ~b HNil |]
pat n, w, ws, x, xs, w', x', b, bs, b' =>
  snocH (S n) {VCons {_} {_} w ws} {VCons {_} {_} x xs} {w'}  {x'} [| HCons {_} {_} {_} {_} {_} b bs |] b'
    = [| HCons {_} {_} {_} {_} {_} b ~(snocH n {ws} {xs} {w'} {x'} [|bs|] b') |]

appendHalvesH : (n  : Nat) ->
                {xws, yws : Vect n Nat} ->
                {xvs, yvs : Vect n ZZ} ->
                < HWords n xws xvs > ->
                < HWords n yws yvs > ->
                < HWords (double' n) (appendHalves {_} {_} xws yws) (appendHalves {_} {_} xvs yvs) >
pat bx, by =>
  appendHalvesH Z {[]} {[]} {[]} {[]} bx by = [| HNil |]
pat xw, yw, xv, yv, bx, by =>
  appendHalvesH 1 {[xw]} {[yw]} {[xv]} {[yv]}
           [| HCons {_} {_} {_} {_} {_} bx HNil |]
           [| HCons {_} {_} {_} {_} {_} by HNil |]
    = [| HCons {_} {_} {_} {_} {_} bx (HCons {_} {_} {_} {_} {_} by HNil) |]
pat n, xw1, xw2, xws, yw1, yw2, yws, xv1, xv2, xvs, yv1, yv2, yvs, bx1, bx2, bxs, by1, by2, bys =>
  appendHalvesH (S (S n)) {VCons {_} {_} xw1 (VCons {_} {_} xw2 xws)} {VCons {_} {_} yw1 (VCons {_} {_} yw2 yws)}
                          {VCons {_} {_} xv1 (VCons {_} {_} xv2 xvs)} {VCons {_} {_} yv1 (VCons {_} {_} yv2 yvs)}
                          [| HCons {_} {_} {_} {_} {_} bx1 (HCons {_} {_} {_} {_} {_} bx2 bxs) |]
                          [| HCons {_} {_} {_} {_} {_} by1 (HCons {_} {_} {_} {_} {_} by2 bys) |]
    = [| let bxs' = ~(snocH _ {xws} {xvs} {yw1} {yv1} [|bxs|] [|by1|])
             bys' = HCons {_} {_} {_} {_} {_} by2 bys
             rec  = ~(appendHalvesH (S n) {_} {_} {_} {_} [|bxs'|] [|bys'|]) 
         in HCons {_} {_} {_} {_} {_} bx1 (HCons {_} {_} {_} {_} {_} bx2 rec)
      |]