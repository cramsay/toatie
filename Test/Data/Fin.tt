import Data.Nat
import Proofs

-- Numbers strictly less than some bound.  The name comes from "finite sets".
data Fin : (n : Nat) -> Type where
    FZ : (k : Nat) -> Fin (S k)
    FS : (k : Nat) -> Fin k -> Fin (S k)

finToNat : {n : Nat} -> Fin n -> Nat
pat k =>
  finToNat {S k} (FZ k) = Z
pat k, fin =>
  finToNat {S k} (FS k fin) = S (finToNat {k} fin)

-- Weaken the bound on a Fin by 1
finWeaken : {n : Nat} -> Fin n -> Fin (S n)
pat k =>
  finWeaken {S k} (FZ k) = FZ (S k)
pat k, fin =>
  finWeaken {S k} (FS k fin) = FS (S k) (finWeaken {k} fin)

-- Weaken the bound on a Fin by some amount
finWeakenN : (m : Nat) -> {n : Nat} -> Fin n -> Fin (plus m n)
pat n, fin =>
  finWeakenN Z {n} fin = fin
pat m, n, fin =>
  finWeakenN (S m) {n} fin
    = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc m n)}
        {\h => Fin h} (finWeakenN m {S n} (finWeaken {n} fin))

finWeakenN' : (m : Nat) -> {n : Nat} -> Fin n -> Fin (plus n m)
pat m, n =>
  finWeakenN' m {S n} (FZ n) = FZ (plus n m)
pat m, n, fin =>
  finWeakenN' m {S n} (FS n fin) = FS (plus n m) (finWeakenN' m {n} fin)

finWeakenToDouble : (n : Nat) -> Fin n -> Fin (double' n)
pat n =>
  finWeakenToDouble (S n) (FZ n) = FZ _
pat n, fin =>
  finWeakenToDouble (S (S n)) (FS (S n) fin) = finWeaken {_} (FS _ (finWeakenToDouble (S n) fin))

-- Add a `Fin`s bound to its value
finPlusBound : (n : Nat) -> Fin n -> Fin (double' n)
finPlusBound 1 (FZ 0) = FS _ (FZ 0) 
pat n =>
  finPlusBound (S (S n)) (FZ (S n)) = FS _ (finWeaken {_} (finPlusBound (S n) (FZ n)))
pat n, fin =>
  finPlusBound (S (S n)) (FS (S n) fin) = FS _ (FS _ (finPlusBound (S n) fin))

-- Add some natural number to a Fin, extending the bound accordingly
finShift : (m : Nat) -> {n : Nat} -> Fin n -> Fin (plus m n)
pat n, fin =>
  finShift Z {n} fin = fin
pat m, n =>
  finShift (S m) {S n} (FZ n)
    = FS (plus m (S n)) (finShift m {S n} (FZ n))
pat m, n, fin =>
  finShift (S m) {S n} (FS n fin)
    = FS (plus m (S n)) (finShift m {S n} (FS n fin))

finDouble : {n : Nat} -> Fin n -> Fin (plus n n)
pat n =>
  finDouble {S n} (FZ n) = FZ _
pat n, fin =>
  finDouble {S n} (FS n fin)
    = let ans = FS _ (FS _ (finDouble {n} fin))
      in eqInd2 {_} {_} {_} {plusSuccRightSucc (S n) n}
           {\h => Fin h} ans

finDouble' : {n : Nat} -> Fin n -> Fin (double' n)
pat n =>
  finDouble' {S n} (FZ n) = FZ _
pat n, fin =>
  finDouble' {S (S n)} (FS (S n) fin) = (FS _ (FS _ (finDouble' {S n} fin)))

finSuccDouble' : {n : Nat} -> Fin n -> Fin (double' n)
pat n =>
  finSuccDouble' {S n} (FZ n) = FS _ (FZ _)
pat n, fin =>
  finSuccDouble' {S (S n)} (FS (S n) fin) = (FS _ (FS _ (finSuccDouble' {S n} fin)))

finPlus : {n, m : Nat} -> Fin n -> Fin m -> Fin (plus n m)
pat m, finm =>
  finPlus {1} {m} (FZ 0) finm = finWeaken {m} finm
pat n, m, finm =>
  finPlus {S (S n)} {m} (FZ (S n)) finm = finWeaken {plus (S n) m} (finPlus {S n} {m} (FZ n) finm)
pat n, m, finn =>
  finPlus {S n} {S m} (FS n finn) (FZ m) = FS (plus n (S m)) (finPlus {n} {S m} finn (FZ m))
pat n, m, finn, finm =>
  finPlus {S n} {S m} (FS n finn) (FS m finm) = FS (plus n (S m)) (finPlus {n} {S m} finn (FS m finm))

finPlusS : {n, m : Nat} -> Fin n -> Fin m -> Fin (plus n m)
pat n, m, finm =>
  finPlusS {S n} {m} (FZ n) finm = (FS _ (finWeakenN n {m} finm))
pat n, m, finn =>
  finPlusS {S n} {S m} (FS n finn) (FZ m) = FS (plus n (S m)) (finPlusS {n} {S m} finn (FZ m))
pat n, m, finn, finm =>
  finPlusS {S n} {S m} (FS n finn) (FS m finm) = FS (plus n (S m)) (finPlusS {n} {S m} finn (FS m finm))

-- Convert a nat to the upper bound of a Fin
natToFin : (n : Nat) -> Fin (S n)
natToFin Z = FZ Z
pat n =>
  natToFin (S n) = FS (S n) (natToFin n)

finWeakenZIsZ : (n : Nat) -> Equal (Fin (S (S n)))
                               (finWeaken {S n} (FZ n))
                               (FZ (S n))
finWeakenZIsZ Z = Refl {_} {_}
pat n =>
  finWeakenZIsZ (S n) = Refl {_} {_}

finZPlusZIsZ : (n,m : Nat) ->
               Equal (Fin (plus (S n) (S m)))
                 (finPlus {S n} {S m} (FZ n) (FZ m))
                 (FZ (plus n (S m)))
pat m =>
  finZPlusZIsZ Z m = Refl {_} {_}
pat n, m =>
  finZPlusZIsZ (S n) m
    = let h1 : Equal (Fin (plus (S (S n)) (S m)))
                          (finWeaken {plus (S n) (S m)} (finPlus {S n} {S m} (FZ n) (FZ m)))
                          (finWeaken {plus (S n) (S m)} (FZ (plus n (S m))))
             = eqInd2 {_} {_} {_} {finZPlusZIsZ n m}
                 {\h => Equal (Fin (plus (S (S n)) (S m)))
                          (finWeaken {plus (S n) (S m)} (finPlus {S n} {S m} (FZ n) (FZ m)))
                          (finWeaken {plus (S n) (S m)} h)
                 } (Refl {_} {_})
      in h1

eqFinDoubleVal : {n : Nat} -> (i : Fin n) ->
                   Equal Nat (plus (finToNat {_} i) (finToNat {_} i))
                             (finToNat {_} (finDouble' {_} i))
pat n =>
  eqFinDoubleVal {S n} (FZ n) = Refl {_} {_}
pat n, fin =>
  eqFinDoubleVal {S (S n)} (FS (S n) fin)
    = eqInd2 {_} {_} {_} {plusSuccRightSucc (finToNat {_} fin) (finToNat {_} fin)}
        {\h => Equal Nat (S h) (S (S (finToNat {_} (finDouble' {_} fin))))}
        (eqCong {_} {_} {\x => (S (S x))} {_} {_} (eqFinDoubleVal {_} fin))

eqFinSuccDoubleVal : {n : Nat} -> (i : Fin n) ->
                   Equal Nat (S (plus (finToNat {_} i) (finToNat {_} i)))
                             (finToNat {_} (finSuccDouble' {_} i))
pat n =>
  eqFinSuccDoubleVal {S n} (FZ n) = Refl {_} {_}
pat n, fin =>
  eqFinSuccDoubleVal {S (S n)} (FS (S n) fin)
    = eqInd2 {_} {_} {_} {plusSuccRightSucc (finToNat {_} fin) (finToNat {_} fin)}
        {\h => Equal Nat (S (S h)) (S (S (finToNat {_} (finSuccDouble' {_} fin))))}
        (eqCong {_} {_} {\x => S (S x)} {_} {_} (eqFinSuccDoubleVal {_} fin))
