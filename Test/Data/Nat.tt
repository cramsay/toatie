import Data.Bool

data Nat : Type where
     Z : Nat
     S : Nat -> Nat

plus : Nat -> Nat -> Nat
pat y : Nat =>
   plus Z y = y
pat k : Nat, y : Nat =>
   plus (S k) y = S (plus k y)

double : Nat -> Nat
pat n : Nat =>
  double n = plus n n

mul : Nat -> Nat -> Nat
pat y : Nat =>
   mul Z y = Z
pat k : Nat, y : Nat =>
   mul (S k) y = plus y (mul k y)

pow : (x,i : Nat) -> Nat
pat x : Nat =>
  pow x Z = 1
pat i, x : Nat =>
  pow x (S i) = mul x (pow x i)

eqNat : (x,y : Nat) -> Bool
eqNat Z Z = True
pat x, y =>
  eqNat (S x) (S y) = eqNat x y
pat x, y =>
  eqNat x y = False

max : (x, y : Nat) -> Nat
pat y =>
  max Z y = y
pat x =>
  max x Z = x
pat x, y =>
  max (S x) (S y) = S (max x y)