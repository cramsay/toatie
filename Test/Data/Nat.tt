import Data.Bool

data Nat : Type where
     Z : Nat
     S : Nat -> Nat

plus : Nat -> Nat -> Nat
pat y : Nat =>
   plus Z y = y
pat k : Nat, y : Nat =>
   plus (S k) y = S (plus k y)

double : Nat -> Nat
pat n : Nat =>
  double n = plus n n

mul : Nat -> Nat -> Nat
pat y : Nat =>
   mul Z y = Z
pat k : Nat, y : Nat =>
   mul (S k) y = plus y (mul k y)

-- Version of mult with no dangling +0 terms
mul' : Nat -> Nat -> Nat
pat y : Nat =>
   mul' Z y = Z
pat y : Nat =>
  mul' 1 y = y
pat k : Nat, y : Nat =>
   mul' (S k) y = plus y (mul' k y)

pow : (x,i : Nat) -> Nat
pat x : Nat =>
  pow x Z = 1
pat i, x : Nat =>
  pow x (S i) = mul x (pow x i)

-- Specialised double function
-- Easier to work with when iterating over pairs since there's no need for
-- plusSuccRightSucc rewrites.
double' : Nat -> Nat
double' Z = Z
pat k =>
  double' (S k) = S (S (double' k))

eqNat : (x,y : Nat) -> Bool
eqNat Z Z = True
pat x, y =>
  eqNat (S x) (S y) = eqNat x y
pat x, y =>
  eqNat x y = False

max : (x, y : Nat) -> Nat
pat y =>
  max Z y = y
pat x =>
  max x Z = x
pat x, y =>
  max (S x) (S y) = S (max x y)

lte : Nat -> Nat -> Bool
pat right =>
  lte Z right = True
pat left =>
  lte left Z = False
pat left, right =>
  lte (S left) (S right) = lte left right

minus : Nat -> Nat -> Nat
pat right =>
  minus Z right = Z
pat left =>
  minus left Z = left
pat left, right =>
  minus (S left) (S right) = minus left right

data NonZero : Nat -> Type where
  SIsNonZero : (x : Nat) -> NonZero (S x)

-- mod' fuel a b = a `mod` (S b)
-- assuming we have enough fuel
mod' : Nat -> Nat -> Nat -> Nat
pat centre, right =>
  mod' Z centre right = centre
pat fuel, centre, right =>
  mod' (S fuel) centre right =
    case lte centre right of
      True  ==> centre
      False ==> mod' fuel (minus centre (S right)) right

modNatNZ : Nat -> (y : Nat) -> NonZero y -> Nat
pat left, right =>
  modNatNZ left (S right) (SIsNonZero right) = mod' left left right

{-
-- div' fuel a b = a `div` (S b)
-- assuming we have enough fuel
div' : Nat -> Nat -> Nat -> Nat
pat centre, right =>
  div' Z centre right = Z
pat fuel, centre, right =>
  div' (S fuel) centre right =
    case lte centre right of
      True  ==> Z
      False ==> S (div' fuel (minus centre (S right)) right)
-}
divCase : Nat -> Nat -> Bool -> Nat
div' : Nat -> Nat -> Nat

pat centre, right =>
  div' centre right = divCase centre right (lte centre right)

pat centre, right =>
  divCase centre right True = Z
pat centre, right =>
  divCase centre right False
    = S (div' (minus centre (S right)) right)

divNatNZ : Nat -> (y : Nat) -> NonZero y -> Nat
pat left, right =>
  divNatNZ left (S right) (SIsNonZero right) = div' left right

flog2 : Nat -> Nat
flog2 Z = Z
flog2 1 = Z
pat n =>
  flog2 n = plus 1 (flog2 (divNatNZ n 2 (SIsNonZero 1)))

clog2 : Nat -> Nat
clog2 Z = Z
clog2 1 = Z
pat n =>
  clog2 (S n) = S (flog2 n)

-- Witness that a `Nat` is a power of two
data Pow2 : Nat -> Type where
  POne : Pow2 1
  PDouble : (n : Nat) -> Pow2 n -> Pow2 (double' n)