import Data.Nat
import Proofs

--------------------------------------------------------------------------------
-- View natural numbers as a series of halfs

-- View for dividing a Nat in half
data Half : Nat -> Type where
     HalfOdd : (n : Nat) -> Half (S (plus n n))
     HalfEven : (n : Nat) -> Half (plus n n)

-- View for recursively dividing a Nat in half
data HalfRec : Nat -> Type where
     HalfRecZ : HalfRec Z
     HalfRec1 : HalfRec 1 
     HalfRecEven : (n : Nat) -> HalfRec (S n) -> HalfRec (plus (S n) (S n))
     HalfRecOdd  : (n : Nat) -> HalfRec (S n) -> HalfRec (S (plus (S n) (S n)))

-- We don't have heuristics to ensure we match on the `Half` arg before our Nat
-- Instead, we encourage toatie to match on the `Half` by introducing `n` as implicit
half' :  {n : Nat} -> Half n -> Half (S n)
pat k =>
  half' {S (plus k k)} (HalfOdd k)
    = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc (S k) k)} {\h => Half h}
        (HalfEven (S k))
pat k =>
  half' {plus k k} (HalfEven k) = HalfOdd k

-- Covering function for Half
half :  (n : Nat) -> Half n
half Z = HalfEven Z
pat n =>
  half (S n) = half' {n} (half n)

-- Covering function for HalfRec
halfRec :  (n : Nat) -> HalfRec n
halfRec' :  {n : Nat} -> Half n -> HalfRec (S n)

halfRec' {Z} (HalfEven Z) = HalfRec1
pat k =>
  halfRec' {plus (S k) (S k)} (HalfEven (S k)) = HalfRecOdd _ (halfRec (S k))
pat k =>
  halfRec' {S (plus k k)} (HalfOdd k)
    = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc (S k) k)} {\h => HalfRec h}
        (HalfRecEven k (halfRec (S k)))

halfRec Z = HalfRecZ
pat n =>
  halfRec (S n) = halfRec' {n} (half n)

-- How many extra bits do we need to represent a HalfRec coefficient?
-- This is a simple worst case, e.g. HalfRecOdd adds one bit for our doubling input
-- and one more bit for our addition with the original input (regardless of if
-- we've crossed a power-of-two boundary in the addition or not).
countBits : {n : Nat} -> HalfRec n -> Nat
countBits {Z} HalfRecZ = Z
countBits {1} HalfRec1 = Z
pat n, hrec =>
  countBits {plus (S n) (S n)} (HalfRecEven n hrec) = S (countBits {S n} hrec)
pat n, hrec =>
  countBits {S (plus (S n) (S n))} (HalfRecOdd n hrec) = S (S (countBits {S n} hrec))

countBits' : (n : Nat) -> Nat
pat n =>
  countBits' n = countBits {n} (halfRec n)

flog2' : {n : Nat} -> HalfRec n -> Nat
flog2' {Z} HalfRecZ = Z
flog2' {1} HalfRec1 = Z
pat n, hrec =>
  flog2' {plus (S n) (S n)} (HalfRecEven n hrec) = S (flog2' {S n} hrec)
pat n, hrec =>
  flog2' {S (plus (S n) (S n))} (HalfRecOdd n hrec) = (S (flog2' {S n} hrec))

flog2 : (n : Nat) -> Nat
pat n =>
  flog2 n = (flog2' {n} (halfRec n))

clog2 : (n : Nat) -> Nat
clog2 Z = Z
pat n =>
  clog2 (S n) = S (flog2' {n} (halfRec n))