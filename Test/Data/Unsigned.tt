-- Playing with binary representations a la Brady's "Constructing Correct
-- Circuits: Verification of Functional Aspects of Hardware Specifications with
-- Dependent Types"

import Data.Nat
import Data.Bit
import Proofs

simple Unsigned : Nat -> Nat -> Type where
  UNil  : Unsigned 0 0
  UCons : {width,val,b : Nat} ->
          Unsigned width val -> Bit b ->
          Unsigned (S width) (plus b (double val))

--------------------------------------------------------------------------------
-- Wordlength manipulation

-- Generate a all-zero word of length `w`
zerosU : (w : Nat) -> Unsigned w 0
zerosU Z = UNil
pat w =>
  zerosU (S w) = UCons {_} {_} {_} (zerosU w) O

prfShiftLeft : (a, b : Nat) -> Equal Nat
                                     (plus (mul (pow 2 a) b)
                                           (mul (pow 2 a) b))
                                     (mul (pow 2 (S a)) b)
pat a, b =>
  prfShiftLeft a b
    = let h1 = Refl {_} {mul (pow 2 (S a)) b}
          h2 = eqInd2 {_} {_} {_} {powerPlusMulPower 2 1 a}
                 {\x => Equal Nat (mul (mul 2 (pow 2 a)) b)
                                  (mul (pow 2 (S a)) b)}
                 h1
          h3 = eqInd2 {_} {_} {_} {plusZeroRightNeutral (pow 2 a)}
                 {\x => Equal Nat (mul (plus (pow 2 a) x) b)
                                  (mul (pow 2 (S a)) b)} h2
      in eqInd2 {_} {_} {_} {mulDistributesOverPlusLeft (pow 2 a) (pow 2 a) b}
           {\x => Equal Nat x (mul (pow 2 (S a)) b)} h3

-- Shift a word left by `n` bits
-- This performs a power-of-two multiplication of the input's natural number encoding
shiftLeft : (n, w : Nat) -> {val : Nat} -> < Unsigned w val > -> < Unsigned (plus n w) (mul (pow 2 n) val) >
pat w, val, xs =>
  shiftLeft Z w {val} xs = [|
    eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusZeroRightNeutral val)} {\h => Unsigned w h} ~xs
  |]
pat n, w, val, xs =>
  shiftLeft (S n) w {val} xs = [|
    let rec = ~(shiftLeft n w {val} xs)
        ans = UCons {plus n w} {mul (pow 2 n) val} {0} rec O
    in eqInd2 {_} {_} {_} {prfShiftLeft n val} {\h => Unsigned (S (plus n w)) h} ans
  |]

-- Extend a word by `w'` bits by padding zeros onto the MSB
-- This preserves natural number encoding of the input
extend : (w', w : Nat) -> {val : Nat} ->
         < Unsigned w val > ->
         < Unsigned (plus w' w) val >
pat w, val, xs =>
  extend Z w {val} xs = xs
pat w' =>
  extend (S w') Z {0} [| UNil |]
    = [| let ans = ~(extend w' 1 {_} [| UCons {_} {_} {_} UNil O |])
         in eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (plusSuccRightSucc w' 0)}
              {\h => Unsigned h 0} ans
      |]
pat w', w, val, xsval, xval, xs, x =>
  extend (S w') (S w) {_} [| UCons {w} {xsval} {xval} xs x |]
    = [| let rec = eqInd2 {_} {_} {_} {plusSuccRightSucc w' w}
                        {\h => Unsigned h xsval}
                     ~(extend (S w') w {xsval} [|xs|])
         in UCons {_} {_} {_} rec x
      |]

--------------------------------------------------------------------------------
-- Unsigned adder

prfAddU : (c, xb, yb, a, b, xsb, ysb : Nat) ->
          (prf : Equal Nat (plus b (double a)) (plus c (plus xb yb)) ) ->
          (Equal Nat
           (plus b (double (plus a (plus xsb ysb))))
           (plus c (plus (plus xb (double xsb)) (plus yb (double ysb))))
          )
pat c, xb, yb, a, b, xsb, ysb,
    prf : (Equal Nat (plus b (double a))
                     (plus c (plus xb yb))) =>
  prfAddU c xb yb a b xsb ysb prf
    = let h0 = Refl {_} {plus b (double (plus a (plus xsb ysb)))}
          h1 = eqInd2 {_} {_} {_}
                      {doubleAssociative a (plus xsb ysb)}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus b n)
                      } h0
          h2 = eqInd2 {_} {_} {_}
                      {plusAssociative b (double a) (double (plus xsb ysb))}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (n)
                      } h1
          h3 = eqInd2 {_} {_} {_}
                      {prf}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus n (double (plus xsb ysb)))
                      } h2
          h4 = eqInd2 {_} {_} {_}
                      {doubleAssociative xsb ysb}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus (plus c (plus xb yb)) n)
                      } h3
          h5 = eqInd2 {_} {_} {_}
                      {eqSym {_} {_} {_} (plusAssociative c (plus xb yb) (plus (double xsb) (double ysb)))}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (n)
                      } h4
          h6 = eqInd2 {_} {_} {_}
                      {plusPlusAssociative xb yb (double xsb) (double ysb)}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus c n)
                      } h5
      in h6

-- Unsigned binary addition (with staging)
addU : (w : Nat) -> {x,y,c : Nat} ->
           < Unsigned w x > -> < Unsigned w y > -> < Bit c > ->
           < Unsigned (S w) (plus c (plus x y)) >

pat c : Nat, cin : <Bit c>, xs : <Unsigned 0 0>, ys : <Unsigned 0 0> =>
  addU 0 {0} {0} {c} [|UNil|] [|UNil|] cin
    = [| UCons {_} {0} {c} UNil ~cin |]

pat w, xn, xsn, yn, ysn, c : Nat,
    cin : <Bit c>, xb : Bit xn, yb : Bit yn,
    xbs : Unsigned w xsn, ybs : Unsigned w ysn =>
  addU (S w) {_} {_} {c} [| UCons {w} {xsn} {xn} xbs xb |]
                             [| UCons {w} {ysn} {yn} ybs yb |] cin
    = [| case (addBit {_} {_} {_} ~cin xb yb) of
           pat a, b, cin', lsb, prf
           => (MkBitPair {a} {b} {_} {prf} cin' lsb) ==>

                let rec = ~(addU _ {_} {_} {_} [|xbs|] [|ybs|] [|cin'|])
                    ans = UCons {_} {_} {_} rec lsb
                in eqInd2 {_} {_} {_}
                          {prfAddU c xn yn a b xsn ysn prf}
                          {\h => Unsigned (S (S w)) h} ans
      |]
