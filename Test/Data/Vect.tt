import Data.Nat

data Vect : Nat -> Type -> Type where
     VNil : {a : Type} -> Vect Z a
     VCons : {a : Type} -> {k : Nat} ->
             a -> Vect k a -> Vect (S k) a

head : {a : Type} -> {n : Nat} -> Vect (S n) a -> a
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  head {a} {n} (VCons {a} {n} x xs) = x

tail : {a : Type} -> {n : Nat} -> Vect (S n) a -> Vect n a
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  tail {a} {n} (VCons {a} {n} x xs) = xs

-- In append, we can keep n and m implicit since we can just pattern match on
-- the constuctors of the Vects. Later with unrollMaps and unrollFoldl, we'll
-- see that we need n to be explicit since we're not pattern matching on Vects
-- (it's inside the quote)

append : {a : Type} -> {n : Nat} -> {m : Nat} -> Vect n a -> Vect m a -> Vect (plus n m) a
pat a : Type, m : Nat, ys : Vect m a =>
  append {a} {Z} {m} (VNil {a}) ys = ys
pat a : Type, n : Nat, m : Nat, x : a, xs : Vect n a, ys : Vect m a =>
  append {a} {(S n)} {m} (VCons {a} {n} x xs) ys = VCons {a} {(plus n m)} x (append {a} {n} {m} xs ys)

unrollMap : (n : Nat) -> {a : Type} -> {b : Type} ->
            (f : < a -> b >) ->
            < Vect n a -> Vect n b >
pat a : Type, b : Type, f : < a->b > =>
  unrollMap Z {a} {b} f = [| \ xs : Vect Z a => VNil {b} |]
pat n : Nat, a : Type, b : Type, f : < a->b > =>
  unrollMap (S n) {a} {b} f = [|
    \xs : Vect (S n) a =>
       let y  = ~f (head {a} {n} xs)
           ys = ~(unrollMap n {a} {b} f) (tail {a} {n} xs)
       in VCons {b} {n} y ys
  |]

unrollFoldl : (n : Nat) -> {acc : Type} -> {elem : Type} ->
              (f : < acc -> elem -> acc >) ->
              (init : <acc>) ->
              < Vect n elem -> acc >
pat acc : Type, elem : Type, f : <acc->elem->acc>, init : <acc> =>
  unrollFoldl Z {acc} {elem} f init = [| \xs : Vect Z elem => ~init |] 
pat n : Nat, acc : Type, elem : Type, f : <acc->elem->acc>, init : <acc> =>
  unrollFoldl (S n) {acc} {elem} f init = [|
    \xs : Vect (S n) elem =>
      let init' = ~f ~init (head {elem} {n} xs)
      in ~(unrollFoldl n {acc} {elem} f [| init' |]) (tail {elem} {n} xs)
  |]

--wrong : {x : Nat} -> Nat
--pat {x : Nat} =>
--  wrong {x} = x

-- Examples for REPL:
--
-- Example of append's partial evaluation with implicits
-- > \a:Nat => \b:Nat => \c:Nat => append {Nat} {2} {1} [a,b] [c]
--
-- We can see the the main unrolling easily
-- > unrollMap 3 {Nat} {Nat} [| S |]
--
-- ...but those head and tail functions still aren't evaluated by the escape.
-- We can force this by giving names to each of the elements in the vector
-- > \a:Nat => \b:Nat => \c:Nat => !(unrollMap 3 {Nat} {Nat} [| S |]) [a,b,c]
--
-- That's the core of how we will flatten functions for recursive data types.
--
-- Trying with unrollFoldl:
-- > \init:Nat => \a:Nat => \b:Nat => \c:Nat => !(unrollFoldl 3 {Nat} {Nat} [| plus |] [|init|]) [a,b,c]
