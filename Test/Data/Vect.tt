import Data.Nat

simple Vect : Nat -> Type -> Type where
     VNil : {a : Type} -> Vect Z a
     VCons : {a : Type} -> {k : Nat} ->
             a -> Vect k a -> Vect (S k) a

head : {a : Type} -> {n : Nat} -> Vect (S n) a -> a
pat a : Type =>
  head {a} {Z} [] impossible
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  head {a} {n} (VCons {a} {n} x xs) = x

tail : {a : Type} -> {n : Nat} -> Vect (S n) a -> Vect n a
pat a : Type, n : Nat, x : a, xs : Vect n a =>
  tail {a} {n} (VCons {a} {n} x xs) = xs

-- In append, we can keep n and m implicit since we can just pattern match on
-- the constuctors of the Vects. Later with vMaps and vFoldl, we'll
-- see that we need n to be explicit since we're not pattern matching on Vects
-- (it's inside the quote)

append : {a : Type} -> {n : Nat} -> {m : Nat} -> Vect n a -> Vect m a -> Vect (plus n m) a
pat a : Type, m : Nat, ys : Vect m a =>
  append {a} {Z} {m} (VNil {a}) ys = ys
pat a : Type, n : Nat, m : Nat, x : a, xs : Vect n a, ys : Vect m a =>
  append {a} {S n} {m} (VCons {a} {n} x xs) ys = VCons {a} {plus n m} x (append {a} {n} {m} xs ys)

vmap : (n : Nat) -> {a,b : Type} ->
       (f : <a> -> <b>) ->
       <Vect n a> -> <Vect n b>
pat a, b, f =>
  vmap Z {a} {b} f [|VNil {_}|] = [|VNil {_}|]
pat n, a, b, f, x, xs =>
  vmap (S n) {a} {b} f [|VCons {_} {_} x xs|]
    = [|VCons {_} {_} ~(f [|x|])
                      ~(vmap _ {_} {_} f [|xs|])
      |]

vzipWith : (n : Nat) -> {a, b, c : Type} ->
           (f : <a> -> <b> -> <c>) ->
           <Vect n a> -> <Vect n b> -> <Vect n c>
pat a, b, c, f =>
  vzipWith Z {a} {b} {c} f [|VNil {_}|] [|VNil {_}|]
    = [|VNil {_}|]
pat n, a, b, c, f, x, xs, y, ys =>
  vzipWith (S n) {a} {b} {c} f [|VCons {_} {_} x xs|] [|VCons {_} {_} y ys|]
    = [| VCons {_} {_} ~(f [|x|] [|y|])
                       ~(vzipWith _ {_} {_} {_} f [|xs|] [|ys|])
      |]

vfoldl : (n : Nat) -> {a,b : Type} ->
         (f : <b> -> <a> -> <b>) ->
         (init : <b>) ->
         <Vect n a> -> <b>
pat a, b, f, init =>
  vfoldl Z {a} {b} f init [|VNil {_}|] = init
pat n, a, b, f, x, xs init =>
  vfoldl (S n) {a} {b} f init [|VCons {_} {_} x xs|]
    = [| ~(vfoldl _ {_} {_} f (f init [|x|]) [|xs|]) |]

vfoldr : (n : Nat) -> {a,b : Type} ->
         (f : <a> -> <b> -> <b>) ->
         (init : <b>) ->
         <Vect n a> -> <b>
pat a, b, f, init =>
  vfoldr Z {a} {b} f init [|VNil {_}|] = init
pat n, a, b, f, x, xs init =>
  vfoldr (S n) {a} {b} f init [|VCons {_} {_} x xs|]
    = f [|x|] (vfoldr _ {_} {_} f init [|xs|])

vdfoldr : (n : Nat) -> {a : Type} ->
          (p : Nat -> Type) -> -- Motive
          (f : (i : Nat) -> <a> -> <p i> -> <p (S i)>) ->
          (init : <p 0>) ->
          < Vect n a > -> < p n >
pat a, p, f, init =>
  vdfoldr Z {a} p f init [|VNil {_}|] = init
pat n, a, p, f, init, x, xs =>
  vdfoldr (S n) {a} p f init [|VCons {_} {_} x xs|]
    = [| ~(f n [|x|] (vdfoldr _ {_} p f init [|xs|])) |]

evens : (n : Nat) -> {a : Type} ->
        <Vect (double' n) a> -> <Vect n a>
pat a =>
  evens Z {a} [|VNil {_}|] = [|VNil {_}|]
pat n, a, x, y, rest =>
  evens (S n) {a} [|VCons {_} {_} x (VCons {_} {_} y rest)|] = [|VCons {_} {_} x ~(evens n {a} [|rest|])|]

odds : (n : Nat) -> {a : Type} ->
       <Vect (double' n) a> -> <Vect n a>
pat a =>
  odds Z {a} [|VNil {_}|] = [|VNil {_}|]
pat n, a, x, y, rest =>
  odds (S n) {a} [|VCons {_} {_} x (VCons {_} {_} y rest)|] = [|VCons {_} {_} y ~(odds n {a} [|rest|])|]

lemmaPowTwoSuccIsDouble : (n : Nat) -> Equal Nat (pow 2 (S n)) (double' (pow 2 n))
pat n =>
  lemmaPowTwoSuccIsDouble n
    = let h1 = eqInd2 {_} {_} {_} {plusZeroRightNeutral (pow 2 n)}
                 {\h => Equal Nat (plus (pow 2 n) (plus (pow 2 n) 0))
                                  (plus (pow 2 n) h)}
                 (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {eqDoublePlusSelf (pow 2 n)}
                 {\h => Equal Nat (plus (pow 2 n) (plus (pow 2 n) 0)) h}
                 h1
      in h2

vdtfoldr : (n : Nat) -> {a : Type} ->
           (p : Nat -> Type) -> -- Motive
           (a -> p 0) ->
           (f : (i : Nat) -> <p i> -> <p i> -> <p (S i)>) ->
           < Vect (pow 2 n) a > -> < p n >
pat a, p, fe, fc, x =>
  vdtfoldr Z {a} p fe fc [|[x]|] = [|fe x|]
pat n, a, p, fe, fc, xs =>
  vdtfoldr (S n) {a} p fe fc xs
    = [| let xs' = eqInd2 {_} {_} {_} {lemmaPowTwoSuccIsDouble n}
                          {\h => Vect h a} ~xs
             es = ~(evens _ {_} [|xs'|])
             os = ~(odds  _ {_} [|xs'|])
         in ~(fc n (vdtfoldr _ {_} p fe fc [|es|]) (vdtfoldr _ {_} p fe fc [|os|]))
      |]