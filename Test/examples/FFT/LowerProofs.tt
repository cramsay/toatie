import Data.Nat
import Data.Nat.Inequality
import Data.Fin
import Data.Signed
import Data.Vect_
import Proofs

import FFT
import FFT.Twiddles

lemmaGatherEvenElem :
  {n : Nat} ->
  {f : Nat -> Nat -> ZZ} ->
  (tw : Twiddles f (double' n)) ->
  (es : (Vect n ZZ)) ->
  (k, i : Fin n) ->
  Equal ZZ (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} tw (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))
           (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} tw (finToNat {n} k) (finToNat {_} (finDouble' {n} j))) x))
                             (indices n) es))
pat n, f, nz, p1, p2, p3, p4, p5, es, k, i =>
  lemmaGatherEvenElem {n} {f} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) es k i
    = let h1 = eqInd2 {_} {_} {_} {atCommutesZipWithIndices n {_} {_} i
                   (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)) es}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))

                          h
                 } (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {mulDistributesOverPlusLeft (finToNat {n} k) (finToNat {n} k) (finToNat {n} i)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))
                          (multZ (f h (double' n)) (at {ZZ} {n} i es))
                 } h1
          h3 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulDistributesOverPlusRight (finToNat {n} k) (finToNat {n} i) (finToNat {n} i))}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))
                          (multZ (f h (double' n)) (at {ZZ} {n} i es))
                 } h2
          h4 = eqInd2 {_} {_} {_} {eqFinDoubleVal {_} i}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))
                          (multZ (f (mul (finToNat {n} k) h) (double' n)) (at {ZZ} {n} i es))
                 } h3
          h5 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (atCommutesZipWithIndices n {_} {_} i
                                     (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (finToNat {n} k) (finToNat {_} (finDouble' {n} j))) x))
                                     es
                                  )}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x))
                             (indices n) es))
                          h
                 } h4
          in h5

lemmaGatherOddElem :
  {n : Nat} ->
  {f : Nat -> Nat -> ZZ} ->
  (tw : Twiddles f (double' n)) ->
  (os : (Vect n ZZ)) ->
  (k, i : Fin n) ->
  Equal ZZ (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} tw 1 (finToNat {n} k))
                                                 (multZ (twiddle {f} {double' n} tw (double (finToNat {n} k)) (finToNat {n} j)) x)))
                             (indices n) os))
           (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                             (\j => \x => (multZ (twiddle {f} {double' n} tw (finToNat {n} k) (finToNat {_} (finSuccDouble' {n} j)))  x))
                             (indices n) os))
pat n, f, nz, p1, p2, p3, p4, p5, os, k, i =>
  lemmaGatherOddElem {n} {f} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) os k i
    = let h1 = eqInd2 {_} {_} {_} {atCommutesZipWithIndices n {_} {_} i
                   (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                       (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                   os}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          h
                 } (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {multAssociativeZ (twiddle {f} {(double' n)} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                    (twiddle {f} {(double' n)} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (plus (finToNat {n} k) (finToNat {n} k)) (finToNat {n} i))
                                                    (at {ZZ} {n} i os)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          h
                 } h1
          h3 = eqInd2 {_} {_} {_} {p4 (mul 1 (finToNat {n} k)) (mul (double (finToNat {n} k)) (finToNat {n} i)) (double' n) (lteRefl (double' n)) nz}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ h (at {_} {_} i os))
                 } h2
          h4 = eqInd2 {_} {_} {_} {plusZeroRightNeutral (finToNat {_} k)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f (plus h (mul (double (finToNat {_} k)) (finToNat {_} i))) (double' n)) (at {_} {_} i os))
                 } h3
          h5 = eqInd2 {_} {_} {_} {mulDistributesOverPlusLeft (finToNat {_} k) (finToNat {_} k) (finToNat {_} i)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f (plus (finToNat {_} k) h) (double' n)) (at {_} {_} i os))
                 } h4
          h6 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulDistributesOverPlusRight (finToNat {_} k) (finToNat {_} i) (finToNat {_} i))}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f (plus (finToNat {_} k) h) (double' n)) (at {_} {_} i os))
                 } h5
          h7 = eqInd2 {_} {_} {_} {mulCommutative (finToNat {_} k) (plus (finToNat {_} i) (finToNat {_} i))}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f (plus (finToNat {_} k) h) (double' n)) (at {_} {_} i os))
                 } h6
          h8 = eqInd2 {_} {_} {_} {mulCommutative (S (plus (finToNat {_} i) (finToNat {_} i))) (finToNat {_} k) }
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f h (double' n)) (at {_} {_} i os))
                 } h7
          h9 = eqInd2 {_} {_} {_} {eqFinSuccDoubleVal {_} i}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          (multZ (f (mul (finToNat {_} k) h) (double' n)) (at {_} {_} i os))
                 } h8
          h10 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (atCommutesZipWithIndices n {_} {_} i
                   (\j => \x => (multZ (f (mul (finToNat {n} k) (finToNat {_} (finSuccDouble' {n} j))) (double' n)) x))
                   os)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i (zipWith n {Fin n} {_} {_}
                                           (\j => \x => (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) 1 (finToNat {n} k))
                                                               (multZ (twiddle {f} {double' n} (MkTwiddles f (double' n) nz p1 p2 p3 p4 p5) (double (finToNat {n} k)) (finToNat {n} j)) x)))
                                           (indices n) os))
                          h
                 } h9
      in h10

lemmaEvensEqual : {n : Nat} ->
                  {f : Nat -> Nat -> ZZ} ->
                  (tw : Twiddles f (double' n)) ->
                  (k : Fin n) ->
                  (es : Vect n ZZ) ->
                  (xs : Vect (double' n) ZZ) ->
                  Equal (Vect n ZZ) (evens n {ZZ} xs) es ->
                  (i : Fin n) ->
                  Equal ZZ (at {ZZ} {n} i (zipWith n {_} {_} {_}
                                             (\j => \x => multZ (twiddle {f} {(double' n)} tw (finToNat {_} k) (finToNat {_} (finDouble' {n} j))) x)
                                             (indices n) es))
                           (at {ZZ} {double' n} (finDouble' {n} i) (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                             (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                             (indices (double' n)) xs))
pat n, f, tw, k, es xs, prfEven, i =>
  lemmaEvensEqual {n} {f} tw k es xs prfEven i
    = let h1 = Refl {_} {at {ZZ} {double' n} (finDouble' {n} i)
                            (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                               (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                               (indices (double' n)) xs)}
          h2 = eqInd2 {_} {_} {_} {atCommutesZipWith (double' n) {_} {_} {_} (finDouble' {n} i)
                                     (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                     (indices (double' n))
                                     xs}
                 {\h => Equal ZZ
                          h
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h1
          h3 = eqInd2 {_} {_} {_} {atEvenIndex {ZZ} n es xs prfEven i}
                 {\h => Equal ZZ
                          ((\j => \x => multZ (twiddle {f} {double' n} tw (finToNat {_} (finWeakenToDouble n k)) (finToNat {double' n} j)) x)
                             (at {_} {_} (finDouble' {_} i) (indices (double' n)))
                             h
                          )
                          
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h2
          h4 = eqInd2 {_} {_} {_} {atEvenIndex {Fin (double' n)} n (evens n {_} (indices (double' n))) (indices (double' n)) (Refl {_} {_}) i}
                 {\h => Equal ZZ
                          ((\j => \x => multZ (twiddle {f} {double' n} tw (finToNat {_} (finWeakenToDouble n k)) (finToNat {double' n} j)) x)
                             h
                             (at {_} {_} i es)
                          )
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h3
          h5 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (atCommutesZipWith n {Fin (double' n)} {_} {_} i
                                     (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                     (evens n {_} (indices (double' n)))
                                     es)}
                 {\h => Equal ZZ
                          h
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h4
          h6 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (eqFinWeakenToDoubleVal {n} k)}
                 {\h => Equal ZZ
                          (at {_} {_} i
                            (zipWith n {_} {_} {_} (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {_} {_} tw h (finToNat {_} j)) x))
                                 (evens n {_} (indices (double' n)))
                                 es))
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h5
          h7 = eqInd2 {_} {_} {_} {eqForAllIndices n {Fin (double' n)} _ _ (\i => eqSym {_} {_} {_} (atEvenIndices n i))}
                 {\h => Equal ZZ
                          (at {_} {_} i
                            (zipWith n {_} {_} {_} (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {_} {_} tw (finToNat {_} k) (finToNat {_} j)) x))
                                 h 
                                 es))
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h6
          h8 = eqInd2 {_} {_} {_} {mapReducesZipWith n (Fin n) (Fin (double' n)) ZZ ZZ
                                     (\i' : Fin n => finDouble' {n} i')
                                     (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {f} {double' n} tw (finToNat {n} k) (finToNat {_} j)) x))
                                     (indices n)
                                     es}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i h)
                          (at {ZZ} {double' n} (finDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h7
      in h8

lemmaOddsEqual : {n : Nat} ->
                 {f : Nat -> Nat -> ZZ} ->
                 (tw : Twiddles f (double' n)) ->
                 (k : Fin n) ->
                 (os : Vect n ZZ) ->
                 (xs : Vect (double' n) ZZ) ->
                 Equal (Vect n ZZ) (odds n {ZZ} xs) os ->
                 (i : Fin n) ->
                 Equal ZZ (at {ZZ} {n} i (zipWith n {_} {_} {_}
                                            (\j => \x => multZ (twiddle {f} {(double' n)} tw (finToNat {_} k) (finToNat {_} (finSuccDouble' {n} j))) x)
                                            (indices n) os))
                          (at {ZZ} {double' n} (finSuccDouble' {n} i) (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                                                 (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                                                 (indices (double' n)) xs))
pat n, f, tw, k, os xs, prfOdd, i =>
  lemmaOddsEqual {n} {f} tw k os xs prfOdd i
    = let h1 = Refl {_} {at {ZZ} {double' n} (finSuccDouble' {n} i)
                            (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                               (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                               (indices (double' n)) xs)}
          h2 = eqInd2 {_} {_} {_} {atCommutesZipWith (double' n) {_} {_} {_} (finSuccDouble' {n} i)
                                     (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                     (indices (double' n))
                                     xs}
                 {\h => Equal ZZ
                          h
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h1
          h3 = eqInd2 {_} {_} {_} {atOddIndex {ZZ} n os xs prfOdd i}
                 {\h => Equal ZZ
                          ((\j => \x => multZ (twiddle {f} {double' n} tw (finToNat {_} (finWeakenToDouble n k)) (finToNat {double' n} j)) x)
                             (at {_} {_} (finSuccDouble' {_} i) (indices (double' n)))
                             h
                          )
                          
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h2
          h4 = eqInd2 {_} {_} {_} {atOddIndex {Fin (double' n)} n (odds n {_} (indices (double' n))) (indices (double' n)) (Refl {_} {_}) i}
                 {\h => Equal ZZ
                          ((\j => \x => multZ (twiddle {f} {double' n} tw (finToNat {_} (finWeakenToDouble n k)) (finToNat {double' n} j)) x)
                             h
                             (at {_} {_} i os)
                          )
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h3
          h5 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (atCommutesZipWith n {Fin (double' n)} {_} {_} i
                                     (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                     (odds n {_} (indices (double' n)))
                                     os)}
                 {\h => Equal ZZ
                          h
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h4
          h6 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (eqFinWeakenToDoubleVal {n} k)}
                 {\h => Equal ZZ
                          (at {_} {_} i
                            (zipWith n {_} {_} {_} (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {_} {_} tw h (finToNat {_} j)) x))
                                 (odds n {_} (indices (double' n)))
                                 os))
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h5
          h7 = eqInd2 {_} {_} {_} {eqForAllIndices n {Fin (double' n)} _ _ (\i => eqSym {_} {_} {_} (atOddIndices n i))}
                 {\h => Equal ZZ
                          (at {_} {_} i
                            (zipWith n {_} {_} {_} (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {_} {_} tw (finToNat {_} k) (finToNat {_} j)) x))
                                 h 
                                 os))
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h6
          h8 = eqInd2 {_} {_} {_} {mapReducesZipWith n (Fin n) (Fin (double' n)) ZZ ZZ
                                     (\i' : Fin n => finSuccDouble' {n} i')
                                     (\j : (Fin (double' n)) => \x : ZZ => (multZ (twiddle {f} {double' n} tw (finToNat {n} k) (finToNat {_} j)) x))
                                     (indices n)
                                     os}
                 {\h => Equal ZZ
                          (at {ZZ} {n} i h)
                          (at {ZZ} {double' n} (finSuccDouble' {n} i)
                              (zipWith (double' n) {(Fin (double' n))} {ZZ} {ZZ}
                                       (\j => \x => (multZ (twiddle {f} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                       (indices (double' n)) xs))
                 } h7
      in h8

-- Prove that X_k xs = X_k (evens xs) + w^k * X_k (odds xs)
-- for all 0 <= k < N/2
eqDitRecLower : {n : Nat} ->
                {f : Nat -> Nat -> ZZ} ->
                (tw : Twiddles f (double' n)) ->
                (xs : Vect (double' n) ZZ) ->
                (es : (Vect n ZZ)) ->
                (os : (Vect n ZZ)) ->
                Equal (Vect n ZZ) (evens n {ZZ} xs) es ->
                Equal (Vect n ZZ) (odds  n {ZZ} xs) os ->
                (k : Fin n) ->
                -- ^ For index `k` only
                Equal ZZ
                  (at {ZZ} {n} k
                      (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                        (dft n {f} (halfTwiddles {f} n tw) es)
                        (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                        (dft n {f} (halfTwiddles {f} n tw) os))))
                  (at {ZZ} {double' n} (finWeakenToDouble n k)
                      (dft (double' n) {f} tw xs))
pat n, f, tw, xs, es, os, prfEven, prfOdd, k =>
  eqDitRecLower {n} {f} tw xs es os prfEven prfOdd k
    = let -- Push the `at` down as far as possible
          h1 = eqInd2 {_} {_} {_} {atCommutesZipWith n {ZZ} {ZZ} {ZZ} k plusZ
                                     (dft n {f} (halfTwiddles {f} n tw) es)
                                     (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                     (dft n {f} (halfTwiddles {f} n tw) os))}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          h
                 } (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {atCommutesZipWith n {ZZ} {ZZ} {ZZ} k multZ
                                     (twiddleRow {f} (double' n) tw 1 n)
                                     (dft n {f} (halfTwiddles {f} n tw) os)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (at {ZZ} {n} k (dft n {f} (halfTwiddles {f} n tw) es))
                                 h
                          )
                 } h1

          -- Reduce the twiddle factor coefficient for our index
          h3 = eqInd2 {_} {_} {_} {lemmaTwiddleHalfRowElem {f} n tw 1 k}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (at {ZZ} {n} k (dft n {f} (halfTwiddles {f} n tw) es))
                                 (multZ h
                                        (at {_} {_} k (dft n {f} (halfTwiddles {f} n tw) os)))
                          )
                 } h2

          -- Reduce dft calls for our index
          h4 = eqInd2 {_} {_} {_} {atCommutesImap n {_} {_} k (\i => \x => dftK n {f} (halfTwiddles {f} n tw) i es) es}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ h -- (dftK n {f} (halfTwiddles {f} n tw) k es)
                                 (multZ (twiddle {f} {double' n} tw 1 (finToNat {_} k))
                                        (at {_} {_} k (dft n {f} (halfTwiddles {f} n tw) os)))
                          )
                 } h3
          h5 = eqInd2 {_} {_} {_} {atCommutesImap n {_} {_} k (\i => \x => dftK n {f} (halfTwiddles {f} n tw) i os) os}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (dftK n {f} (halfTwiddles {f} n tw) k es)
                                 (multZ (twiddle {f} {double' n} tw 1 (finToNat {_} k))
                                        h)
                          )
                 } h4

          -- Rewrite in terms of full twiddle factor rows
          h6 = eqInd2 {_} {_} {_} {lemmaHalfTwiddleRowScale {f} n tw k}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (zipWith n {_} {_} {_} multZ h es))
                                 (multZ (twiddle {f} {double' n} tw 1 (finToNat {_} k))
                                        (sumZ n (zipWith n {_} {_} {_} multZ h os)))
                          )
                 } h5

          -- Move twiddle factor const multiplication into sum and dot product
          h7 = eqInd2 {_} {_} {_} {multDistributesOverSumZ n (twiddle {f} {double' n} tw 1 (finToNat {_} k))
                                     (zipWith n {_} {_} {_} multZ
                                        (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                        os)
                                  }
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (zipWith n {_} {_} {_} multZ
                                            (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                            es))
                                 h
                          )
                 } h6
          h8 = eqInd2 {_} {_} {_} {mapDistributesOverZipWith n _ _ _ _
                                     (multZ (twiddle {f} {double' n} tw 1 (finToNat {n} k)))
                                     multZ
                                     (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                     os}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (zipWith n {_} {_} {_} multZ
                                            (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                            es))
                                 (sumZ n h)
                          )
                 } h7
          h9 = eqInd2 {_} {_} {_} {mapReducesZipWith n (Fin n) ZZ ZZ ZZ
                                     (\ind => twiddle {f} {double' n} tw (double (finToNat {n} k)) (finToNat {n} ind))
                                     (\w => \x => multZ (twiddle {f} {double' n} tw 1 (finToNat {n} k)) (multZ w x))
                                     (indices n)
                                     os}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (zipWith n {_} {_} {_} multZ
                                            (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                            es))
                                 (sumZ n h)
                          )
                 } h8

          -- Combine w^k_2N * (w^(2km)_2N * x) into w^(k(2m+1)) * x
          h10 = eqInd2 {_} {_} {_} {eqForAllIndices n {ZZ}
                                     _
                                     _
                                     (lemmaGatherOddElem {n} {f} tw os k)
                                  }
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (zipWith n {_} {_} {_} multZ
                                            (twiddleRow {f} (double' n) tw (double (finToNat {_} k)) n)
                                            es))
                                 (sumZ n h)
                          )
                 } h9

          -- Rearrange even side to be indexed by `finDouble' n`
          h11 = eqInd2 {_} {_} {_} {mapReducesZipWith n (Fin n) ZZ ZZ ZZ
                                      (\j => twiddle {f} {(double' n)} tw (plus (finToNat {n} k) (finToNat {n} k)) (finToNat {_} j))
                                      multZ
                                      (indices n)
                                      es}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n h)
                                 (sumZ n (zipWith n {_} {_} {_} (\j => \x => multZ (twiddle {f} {(double' n)} tw (finToNat {_} k) (finToNat {_} (finSuccDouble' {n} j))) x) (indices n) os))
                          )
                 } h10
          h12 = eqInd2 {_} {_} {_} {eqForAllIndices n {ZZ} _ _
                                      (lemmaGatherEvenElem {n} {f} tw es k)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n h)
                                 (sumZ n (zipWith n {_} {_} {_} (\j => \x => multZ (twiddle {f} {(double' n)} tw (finToNat {_} k) (finToNat {_} (finSuccDouble' {n} j))) x) (indices n) os))
                          )
                 } h11

          -- Rewrite in terms of `xs` only (eliminate references to `es` and `os`
          h13 = eqInd2 {_} {_} {_} {eqForEvens n {ZZ} _ _ (lemmaEvensEqual {n} {f} tw k es xs prfEven)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n h)
                                 (sumZ n (zipWith n {_} {_} {_} (\j => \x => multZ (twiddle {f} {(double' n)} tw (finToNat {_} k) (finToNat {_} (finSuccDouble' {n} j))) x) (indices n) os))
                          )
                 } h12
          h14 = eqInd2 {_} {_} {_} {eqForOdds n {ZZ} _ _ (lemmaOddsEqual {n} {f} tw k os xs prfOdd)}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          (plusZ (sumZ n (evens n {_} (zipWith (double' n) {(Fin (double' n))} {_} {_}
                                    (\j => \x => (multZ (twiddle {_} {(double' n)} tw (finToNat {(double' n)} (finWeakenToDouble n k)) (finToNat {(double' n)} j)) x))
                                    (indices (double' n)) xs)))
                                 (sumZ n h)
                          )
                 } h13
          h15 = eqInd2 {_} {_} {_} {eqSumEvenOdds n _}
                 {\h => Equal ZZ
                          (at {ZZ} {n} k
                              (zipWith n {ZZ} {ZZ} {ZZ} plusZ
                                (dft n {f} (halfTwiddles {f} n tw) es)
                                (zipWith n {ZZ} {ZZ} {ZZ} multZ (twiddleRow {f} (double' n) tw 1 n)
                                                                (dft n {f} (halfTwiddles {f} n tw) os))))
                          h
                 } h14

          -- Starting from RHS now
          g1 = Refl {_} {at {ZZ} {double' n} (finWeakenToDouble n k) (dft (double' n) {f} tw xs)}

          -- Reduce dft calls for our index
          g2 : Equal ZZ (dftK (double' n) {f} tw (finWeakenToDouble n k) xs)
                        (at {ZZ} {double' n} (finWeakenToDouble n k) (dft (double' n) {f} tw xs))

             = eqInd2 {_} {_} {_} {atCommutesImap (double' n) {_} {_} (finWeakenToDouble n k) (\i => \x=> dftK (double' n) {f} tw i xs) xs}
                 {\h => Equal ZZ
                          h
                          (at {ZZ} {double' n} (finWeakenToDouble n k) (dft (double' n) {f} tw xs))} g1

          g3 = eqInd2 {_} {_} {_} {mapReducesZipWith (double' n) (Fin (double' n)) ZZ ZZ ZZ
                                      (\i : Fin (double' n) => twiddle {f} {double' n} tw (finToNat {_} (finWeakenToDouble n k)) (finToNat {_} i))
                                      multZ
                                      (indices (double' n))
                                      xs
                                   }
                 {\h => Equal ZZ
                          (sumZ (double' n) h)
                          (at {ZZ} {double' n} (finWeakenToDouble n k) (dft (double' n) {f} tw xs))} g2


    in eqTrans {_} {_} {_} {_} h15 g3
