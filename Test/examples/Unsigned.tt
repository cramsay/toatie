-- Playing with binary representations a la Brady's "Constructing Correct
-- Circuits: Verification of Functional Aspects of Hardware Specifications with
-- Dependent Types"

import Data.Nat
import Proofs

simple Bit : Nat -> Type where
  O : Bit 0
  I : Bit 1

simple BitPair : Nat -> Nat -> Nat -> Type where
  MkBitPair : {a,b,c,x,y : Nat} ->
              {prf : Equal Nat
                           (plus b (double a))
                           (plus c (plus x y))
              } ->
              Bit a -> Bit b -> BitPair c x y

-- AND gates

and : Nat -> Nat -> Nat
pat x, y =>
  and (S x) (S y) = 1
pat y =>
  and Z y = 0
pat x =>
  and x Z = 0

-- Need a nudge to show that `and x 0` is always zero? Can maybe improve case
-- tree behaviour for compile time vs run time? Think the nesting of cases is
-- the culprit here... need to match on x before looking at y.
--
-- The need for these here could probably be deferred just by case splitting on
-- all four possible input combinations, but it's bound to come up at some point!

prfAndZeroRight : (x : Nat) -> Equal Nat 0 (and x 0)
prfAndZeroRight Z = Refl {_} {_}
pat x =>
  prfAndZeroRight (S x) = Refl {_} {_}

andGate : {x,y : Nat} -> Bit x -> Bit y -> Bit (and x y)
andGate {_} {_} I I = I
pat y, b =>
  andGate {_} {y} O b = O
pat x, a =>
  andGate {x} {_} a O
    = let ans = O in
      eqInd2 {_} {_} {_} {prfAndZeroRight x} {_} ans

-- OR gates

or : Nat -> Nat -> Nat
or Z Z = 0
pat x, y =>
  or (S x) y = 1
pat x, y =>
  or x (S y) = 1

prfOrOneRight : (x : Nat) -> Equal Nat 1 (or x 1)
prfOrOneRight Z = Refl {_} {_}
pat x =>
  prfOrOneRight (S x) = Refl {_} {_}

orGate : {x,y : Nat} -> Bit x -> Bit y -> Bit (or x y)
orGate {Z} {Z} O O = O
pat y, b =>
  orGate {_} {y} I b = I
pat x, a =>
  orGate {x} {_} a I =
    let ans = I in
    eqInd2 {_} {_} {_} {prfOrOneRight x} {_} ans


-- XOR gates

xor : Nat -> Nat -> Nat
xor Z       Z     = 0
pat x =>
  xor (S x) Z     = 1
pat y =>
  xor Z     (S y) = 1
pat x, y =>
  xor (S x) (S y) = 0

xorGate : {x,y : Nat} -> Bit x -> Bit y -> Bit (xor x y)
xorGate {_} {_} O O = O
xorGate {_} {_} O I = I
xorGate {_} {_} I O = I
xorGate {_} {_} I I = O

addBit : {c,x,y : Nat} -> Bit c -> Bit x -> Bit y -> BitPair c x y
addBit {_} {_} {_} O O O = MkBitPair {0} {0} {0} {0} {0} {Refl {Nat} {0}} O O
addBit {_} {_} {_} O O I = MkBitPair {0} {1} {0} {0} {1} {Refl {Nat} {1}} O I
addBit {_} {_} {_} O I O = MkBitPair {0} {1} {0} {1} {0} {Refl {Nat} {1}} O I
addBit {_} {_} {_} O I I = MkBitPair {1} {0} {0} {1} {1} {Refl {Nat} {2}} I O
addBit {_} {_} {_} I O O = MkBitPair {0} {1} {1} {0} {0} {Refl {Nat} {1}} O I
addBit {_} {_} {_} I O I = MkBitPair {1} {0} {1} {0} {1} {Refl {Nat} {2}} I O
addBit {_} {_} {_} I I O = MkBitPair {1} {0} {1} {1} {0} {Refl {Nat} {2}} I O
addBit {_} {_} {_} I I I = MkBitPair {1} {1} {1} {1} {1} {Refl {Nat} {3}} I I

-- Unsigned binary types

simple Unsigned : Nat -> Nat -> Type where
  UNil  : Unsigned 0 0
  UCons : {width,val,b : Nat} ->
          Unsigned width val -> Bit b ->
          Unsigned (S width) (plus b (double val))

u1_1 : Unsigned 1 1
u1_1 = UCons {_} {_} {_} UNil I

u1_0 : Unsigned 1 0
u1_0 = UCons {_} {_} {_} UNil O

u2_3 : Unsigned 2 3
u2_3 = UCons {_} {_} {_} u1_1 I

u2_1 : Unsigned 2 1
u2_1 = UCons {_} {_} {_} u1_0 I

prfUAdd : (c, xb, yb, a, b, xsb, ysb : Nat) ->
          (prf : Equal Nat (plus b (double a)) (plus c (plus xb yb)) ) ->
          (Equal Nat
           (plus b (double (plus a (plus xsb ysb))))
           (plus c (plus (plus xb (double xsb)) (plus yb (double ysb))))
          )
pat c, xb, yb, a, b, xsb, ysb,
    prf : (Equal Nat (plus b (double a))
                     (plus c (plus xb yb))) =>
  prfUAdd c xb yb a b xsb ysb prf
    = let h0 = Refl {_} {plus b (double (plus a (plus xsb ysb)))}
          h1 = eqInd2 {_} {_} {_}
                      {doubleAssociative a (plus xsb ysb)}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus b n)
                      } h0
          h2 = eqInd2 {_} {_} {_}
                      {plusAssociative b (double a) (double (plus xsb ysb))}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (n)
                      } h1
          h3 = eqInd2 {_} {_} {_}
                      {prf}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus n (double (plus xsb ysb)))
                      } h2
          h4 = eqInd2 {_} {_} {_}
                      {doubleAssociative xsb ysb}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus (plus c (plus xb yb)) n)
                      } h3
          h5 = eqInd2 {_} {_} {_}
                      {eqSym {_} {_} {_} (plusAssociative c (plus xb yb) (plus (double xsb) (double ysb)))}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (n)
                      } h4
          h6 = eqInd2 {_} {_} {_}
                      {plusPlusAssociative xb yb (double xsb) (double ysb)}
                      {\n : Nat => Equal Nat (plus b (double (plus a (plus xsb ysb))))
                                             (plus c n)
                      } h5
      in h6

-- Unsigned binary addition (without staging)
uAdd : {w,x,y,c : Nat} ->
       Unsigned w x -> Unsigned w y -> Bit c ->
       Unsigned (S w) (plus c (plus x y))

pat c, cin =>
  uAdd {0} {0} {0} {c} UNil UNil cin
    = UCons {_} {0} {c} UNil cin

pat w, xn, xsn, yn, ysn, c, cin, xb, yb,
    xbs : Unsigned w xsn, ybs : Unsigned w ysn =>
  uAdd {S w} {_} {_} {c} (UCons {w} {xsn} {xn} xbs xb) (UCons {w} {ysn} {yn} ybs yb) cin
    = case (addBit {_} {_} {_} cin xb yb) of
        pat a, b : Nat, cin' : Bit a, lsb : Bit b,
            prf : Equal Nat (plus b (double a)) (plus c (plus xn yn))
        => (MkBitPair {a} {b} {c} {xn} {yn} {prf} cin' lsb) ==>
             let rec = uAdd {_} {_} {_} {_} xbs ybs cin'
                 ans = UCons {_} {_} {_} rec lsb
             in eqInd2 {_} {_} {_}
                       {prfUAdd c xn yn a b xsn ysn prf}
                       {_} ans

-- -- Unsigned binary addition (with staging)
uAddCirc : (w : Nat) -> {x,y,c : Nat} ->
           < Unsigned w x > -> < Unsigned w y > -> < Bit c > ->
           < Unsigned (S w) (plus c (plus x y)) >

pat c : Nat, cin : <Bit c>, xs : <Unsigned 0 0>, ys : <Unsigned 0 0> =>
  uAddCirc 0 {0} {0} {c} [|UNil|] [|UNil|] cin
    = [| UCons {_} {0} {c} UNil ~cin |]

pat w, xn, xsn, yn, ysn, c : Nat,
    cin : <Bit c>, xb : Bit xn, yb : Bit yn,
    xbs : Unsigned w xsn, ybs : Unsigned w ysn =>
  uAddCirc (S w) {_} {_} {c} [| UCons {w} {xsn} {xn} xbs xb |]
                             [| UCons {w} {ysn} {yn} ybs yb |] cin
    = [| case (addBit {_} {_} {_} ~cin xb yb) of

           pat a, b : Nat, cin' : Bit a, lsb : Bit b,
               prf : Equal Nat (plus b (double a)) (plus c (plus xn yn))
           => (MkBitPair {a} {b} {c} {xn} {yn} {prf} cin' lsb) ==>

                let rec = ~(uAddCirc _ {_} {_} {_} [|xbs|] [|ybs|] [|cin'|])
                    ans = UCons {_} {_} {_} rec lsb
                in eqInd2 {_} {_} {_}
                          {prfUAdd c xn yn a b xsn ysn prf}
                          {_} ans
      |]

uInc2 : {x,y : Nat} ->
        < Unsigned 127 x > -> < Unsigned 127 y > ->
        < Unsigned 128 ((plus x y)) >
pat x, y, xs, ys => uInc2 {x} {y} xs ys = uAddCirc 127 {x} {y} {0} xs ys [| O |]

-- \ba => \bb => \bc => \bd => \a : Bit ba => \b : Bit bb => \c : Bit bc => \d : Bit bd => uAddCirc _ {_} {_} {_} [| UCons {_} {_} {_} (UCons {_} {_} {_} UNil a) b |] [| UCons {_} {_} {_} (UCons {_} {_} {_} UNil c) d |] [| O |]