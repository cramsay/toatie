-- Simple example of a single bit full adder
--
-- No fancy verification... See our Unsigned adder example for that.

object Bit : Type where
     O : Bit
     I : Bit

xor : Bit -> Bit -> Bit
xor O O = O
xor O I = I
xor I O = I
xor I I = O

or : Bit -> Bit -> Bit
or O O = O
or O I = I
or I O = I
or I I = I

and : Bit -> Bit -> Bit
and O O = O
and O I = O
and I O = O
and I I = I

simple Pair : Type -> Type where
     MkP : {a : Type} -> a -> a -> Pair a

fa : Bit -> Bit -> Bit -> Pair Bit
pat a, b, cin =>
  fa a b cin
    = let axorb = xor a b
          sum   = xor axorb cin
          cout  = or (and axorb cin) (and a b)
      in MkP {_} cout sum

faCirc : < Bit -> Bit -> Bit -> Pair Bit >
faCirc = [| \a => \b => \cin => fa a b cin |]