import Data.Nat
import Data.Nat.Half
import Data.Fin
import Data.Vect

-- Introducing Bits --------------------------------------------------
----------------------------------------------------------------------

simple Bit : Type where
  O : Bit
  I : Bit

simple Pair : Type -> Type -> Type where
     MkP : {a,b : Type} -> a -> b -> Pair a b

-- Full adder
addBit : Bit -> Bit -> Bit -> Pair Bit Bit
addBit O O O = MkP {_} {_} O O
addBit O O I = MkP {_} {_} O I
addBit O I O = MkP {_} {_} O I
addBit O I I = MkP {_} {_} I O
addBit I O O = MkP {_} {_} O I
addBit I O I = MkP {_} {_} I O
addBit I I O = MkP {_} {_} I O
addBit I I I = MkP {_} {_} I I

-- Binary numbers indexed by width -----------------------------------
----------------------------------------------------------------------

simple Bin : Nat -> Type where
  BinNil : Bin 0
  BinCons : {n : Nat} -> Bin n -> Bit -> Bin (S n)

addBin' : (n : Nat) -> < Bit > -> < Bin n > -> < Bin n > -> < Bin (S n) >
pat cin =>
  addBin' Z cin [| BinNil |] [| BinNil |]
    = [| BinCons {_} BinNil ~cin |]
pat n, cin, x, xs, y, ys =>
  addBin' (S n) cin [| BinCons {_} xs x |] [| BinCons {_} ys y |]
    = [| case addBit ~cin x y of
           pat cin', lsb =>
             MkP {_} {_} cin' lsb ==>
               BinCons {_} ~(addBin' _ [|cin'|] [|xs|] [|ys|]) lsb
      |]

bx : Bin 3
bx = BinCons {_} (BinCons {_} (BinCons {_} BinNil O) I) I

by : Bin 2
by = BinCons {_} (BinCons {_} BinNil I) O

zeroBin : (n : Nat) -> < Bin n >
zeroBin Z = [| BinNil |]
pat n =>
  zeroBin (S n) = [| BinCons {_} ~(zeroBin n) O |]

resizeBin : (n, n' : Nat) -> < Bin n > -> < Bin n' >
-- Extend with zeros
pat n', bs =>
  resizeBin Z n' bs = zeroBin n'
-- Truncate
pat n, bs =>
  resizeBin n Z bs = [| BinNil |] 
-- Recurse
pat n, n', bs, b =>
  resizeBin (S n) (S n') [| BinCons {_} bs b |]
    = [| BinCons {_} ~(resizeBin n n' [|bs|]) b |]

addBin : (n, m : Nat) -> < Bit > -> < Bin n > -> < Bin m > -> < Bin (S (max n m)) >
pat n, m, cin, xs, ys =>
  addBin n m cin xs ys = addBin' _ cin (resizeBin _ _ xs)
                                       (resizeBin _ _ ys)

{- Synthesisable example of calling addBin
myaddBin : < Bin 3 -> Bin 3 -> Bin 4 >
myaddBin = [| \x => \y => ~(addBin 3 3 [|O|] [|x|] [|y|]) |]
-}

mulConstBin' : (n : Nat) -> {c : Nat} -> (chr : HalfRec c) ->
            < Bin n > -> < Bin (plus (clog2 c) n) >
pat c, chr =>
  mulConstBin' Z {c} chr [| BinNil |] = zeroBin _
pat n, xs =>
  mulConstBin' n {Z} HalfRecZ xs = zeroBin _
pat n, xs =>
  mulConstBin' n {1} HalfRec1 xs = resizeBin _ _ xs
pat n, c, chr, xs =>
  mulConstBin' n {plus (S c) (S c)} (HalfRecEven c chr) xs
    = resizeBin _ _ [|BinCons {_} ~(mulConstBin' n {S c} chr xs) O|]
pat n, c, chr, xs =>
  mulConstBin' n {S (plus (S c) (S c))} (HalfRecOdd c chr) xs
    = resizeBin _ _ (addBin _ _ [|O|] [| BinCons {_} ~(mulConstBin' n {S c} chr xs) O |] xs)

mulConstBin : (n, c : Nat) -> < Bin n > -> < Bin (plus (clog2 c) n) >
pat n c xs =>
  mulConstBin n c xs = mulConstBin' n {c} (halfRec c) xs

{- A simple definition of multiplication but with lots of additions with zero that could be avoided
mulBin : (n, m : Nat) -> < Bin n > -> < Bin m > -> < Bin (plus n m) >
pat m, ys =>
  mulBin Z m [| BinNil |] ys = zeroBin _
pat n, m, xs, x, ys =>
  mulBin (S n) m [| BinCons {_} xs x |] ys
    = [| let rec = ~(mulBin _ _ [|xs|] [|BinCons {_} ~ys O|])
         in case x of
              O ==> ~(resizeBin _ _ [|rec|])
              I ==> ~(resizeBin _ _ (addBin _ _ [|O|] ys [|rec|]))
      |]
-}

-- A more realistic multiplier definition
mulBin : (n, m : Nat) -> (acc : <Bin m>) -> (xs : <Bin n>) -> (ys : <Bin m>) -> <Bin (plus n m)>
pat m, ys, acc =>
  mulBin Z m acc [|BinNil|] ys = acc
pat n, m, xs, x, ys, acc =>
  mulBin (S n) m acc [| BinCons {_} xs x |] ys
    = [| let row : Bin m = case x of
               I ==> ~ys
               O ==> ~(zeroBin _)
         in case ~(addBin' _ [|O|] [|row|] acc) of
              pat zs, z =>
                (BinCons {_} zs z) ==> BinCons {_} ~(mulBin _ _ [|zs|] [|xs|] ys) z
      |]

{- little synthesisable multiplier
mymul : < Bin 4 -> Bin 3 -> Bin (plus 4 3) >
mymul = [| \x => \y => ~(mulBin 4 3 (zeroBin _) [|x|] [|y|]) |]
-}

-- Dot product using higher order functions on vect
dotProdBin : (i,n,m : Nat) ->
             <Vect i (Bin n)> ->
             <Vect i (Bin m)> ->
             <Bin (plus i (plus n m))>
pat i, n, m, xs, ys =>
  dotProdBin i n m xs ys
    = [| let mults = ~(vzipWith _ {_} {_} {_} (mulBin _ _ (zeroBin m)) xs ys)
         in ~(vdfoldr _ {_}
                (\i => Bin (plus i (plus n m)))
                (\i => \x => \y => addBin' (plus i (plus n m)) [|O|]
                                           (resizeBin (plus n m) _ x) y)
                (zeroBin _) [|mults|])
      |]

-- Dot product using higher order functions on vect with an adder tree
dotProdTreeBin : (i,n,m : Nat) ->
                 <Vect (pow 2 i) (Bin n)> ->
                 <Vect (pow 2 i) (Bin m)> ->
                 <Bin (plus i (plus n m))>
pat i, n, m, xs, ys =>
  dotProdTreeBin i n m xs ys
    = [| let mults = ~(vzipWith _ {_} {_} {_} (mulBin _ _ (zeroBin m)) xs ys)
         in ~(vdtfoldr _ {_}
                (\i => Bin (plus i (plus n m)))
                (\x => x)
                (\i => addBin' _ [|O|])
                [|mults|])
      |]

mydotprodbin : < Vect 2 (Bin 2) -> Vect 2 (Bin 3) -> Bin 7 >
mydotprodbin = [| \xs => \ys => ~(dotProdBin 2 2 3 [|xs|] [|ys|])|]

mydotprodtreebin : < Vect 2 (Bin 2) -> Vect 2 (Bin 3) -> Bin 6 >
mydotprodtreebin = [| \xs => \ys => ~(dotProdTreeBin 1 2 3 [|xs|] [|ys|])|]

-- Binary numbers indexed by their upper bound and width -------------
----------------------------------------------------------------------

simple Bounded : Nat -> Nat -> Type where
  MkB : {n, w : Nat} -> {prf : Equal Nat w (clog2 (S n))} -> Bin w -> Bounded n w

Bounded' : (n : Nat) -> Type
pat n =>
  Bounded' n = Bounded n (clog2 (S n))

-- Bit funny, but Bounded will actually error if we try to construct one with a
-- binary number with _more_ bits than we need (as well as less)!

boundedToBin : (n, w : Nat) -> Bounded n w -> Bin w
pat n, w, prf, xs =>
  boundedToBin n w (MkB {n} {w} {prf} xs) = xs

addB : (n, m : Nat) -> < Bounded' n > -> < Bounded' m > -> < Bounded' (plus n m) >
pat n, m, xs, ys =>
  addB n m [| MkB {n} {_} {_} xs |] [| MkB {m} {_} {_} ys |]
    = [| let ans = ~(addBin _ _ [|O|] [|xs|] [|ys|])
         in MkB {_} {_} {Refl {_} {_}} ~(resizeBin _ _ [|ans|])
      |]

mulConstB : (n, c : Nat) -> < Bounded' n > -> < Bounded' (mul c n) >
pat n, c, xs =>
  mulConstB n c [| MkB {n} {_} {_} xs |]
    = [| let ans = ~(mulConstBin _ c [|xs|])
         in MkB {_} {_} {Refl {_} {_}} ~(resizeBin _ _ [|ans|])
      |]

myconstmul : < Bounded 6 3 -> Bounded (mul 6 5) 5 >
myconstmul = [| \x => ~(mulConstB 6 5 [|x|])
             |]

data Vect' : Nat -> Type -> Type where
  VNil' : {a : Type} -> Vect' Z a
  VCons' : {a : Type} -> {k : Nat} ->
           a -> Vect' k a -> Vect' (S k) a
             
sum : (n : Nat) -> Vect' n Nat -> Nat
sum Z (VNil' {_}) = Z
pat n, x, xs =>
  sum (S n) (VCons' {_} {_} x xs) = plus x (sum n xs)

lemmaDotProd : (n, c, cs : Nat) ->
               Equal Nat (plus (mul c n) (mul n cs))
                         (mul n (plus c cs))
pat n, c, cs =>
  lemmaDotProd n c cs
    = let h1 = eqInd2 {_} {_} {_} {mulCommutative c n}
                 {\h => Equal Nat (plus (mul c n) (mul n cs))
                                  (plus h         (mul n cs))}
                 (Refl {_} {_})
          h2 = eqInd2 {_} {_} {_} {eqSym {_} {_} {_} (mulDistributesOverPlusRight n c cs)}
                 {\h => Equal Nat (plus (mul c n) (mul n cs)) h}
                 h1
      in h2

dotProd : (j,n : Nat) -> (ws : Vect' j Nat) ->
          < Vect j (Bounded' n) > ->
          < Bounded' (mul n (sum j ws)) >
pat n, xs =>
  dotProd Z n (VNil' {_}) xs = [| MkB {_} {_} {Refl {_} {_}} ~(zeroBin _) |]
pat j, n, w, ws, x, xs =>
  dotProd (S j) n (VCons' {_} {_} w ws) [|VCons {_} {_} x xs|]
    = [| let y = ~(addB _ _ (mulConstB _ w [|x|])
                            (dotProd _ _ ws [|xs|]))
         --in eqInd2 {_} {_} {_} {lemmaDotProd n w (sum j ws)}
         --     {\h => Bounded' h} y
         in y
      |]

-- Little synthesisable example of using dotProd
myws : Vect' 2 Nat
myws = VCons' {_} {_} 3 (VCons' {_} {_} 7 (VNil' {_}))

mydotprod : < Vect 2 (Bounded 6 3) -> Bounded (mul 6 (sum 2 myws)) 6 >
mydotprod = [| \xs => ~(dotProd 2 6 myws [|xs|])
            |]