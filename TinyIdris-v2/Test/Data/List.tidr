-- Basics of working with lists
--
-- Higher-order functions such as `map` required solving the unifyBinders hole
-- in TinyIdris v2.

import Data.Nat

data List : Type -> Type where
  Nil : (a : Type) -> List a
  Cons : (a : Type) -> (x : a) -> (xs : List a) -> List a

map : (a : Type) -> (b: Type) -> (a -> b) -> List a -> List b
pat a : Type, b : Type, f : (a -> b) =>
  map a b f (Nil a) = Nil b
pat a : Type, b : Type, f : (a -> b), x : a, xs : List a =>
  map a b f (Cons a x xs) = Cons b (f x) (map a b f xs)

-- Can use map with all type parameters inferred:
-- Note that `[...] translates to fold with Nil and Cons with implicit `a`s.
-- > map _ _ (\x : Nat => S x) (Cons _ 0 (Cons _ 1 (Nil _)))
-- > map _ _ S `[0,1]