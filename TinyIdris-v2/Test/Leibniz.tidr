-- An example of using proofs with the Leibniz equality
--
-- We work towards a bounded natural number (BNat) whose upper limit is encoded in its type.
-- (Similar to `Fin`)
--
-- Addition of two BNats requires a proof that (S n) + m === n + (S m)

data Nat : Type where
     Z : Nat
     S : Nat -> Nat

-- Addition for Nats
plus : Nat -> Nat -> Nat
pat y : Nat =>
   plus Z y = y
pat k : Nat, y : Nat =>
   plus (S k) y = S (plus k y)

-- Proof that S commutes under plus
-- i.e. (n+1) + m === n + (m+1)
plusSComm : (p : (Nat -> Type))    -> -- Given a property, p
            {n : Nat} -> {m : Nat} -> -- And two Nats, n & m
            p (plus (S n) m)       -> -- If the property holds for Sn + m
            p (plus n (S m))          -- We prove that it holds for n + Sm
pat p : (Nat -> Type), m : Nat, h : p (plus (S Z) m) =>
  plusSComm p {Z} {m} h = h
pat p : (Nat -> Type), n : Nat, m : Nat, h : p (plus (S (S n)) m) =>
  plusSComm p {(S n)} {m} h = plusSComm (\y : Nat => p (S y)) {n} {m} h

-- Bounded Nats
data BNat : Nat -> Type where
    BZ : {r : Nat} -> BNat r
    BS : {r : Nat} -> BNat r -> BNat (S r)

-- Conversion from Nat to minimal BNat
natToBNat : {x : Nat} -> BNat x
natToBNat {Z} = BZ {Z}
pat n : Nat =>
  natToBNat {(S n)} = BS {n} (natToBNat {n})

-- Additions of two BNats, preserving their bounds.
-- This relies on our proof of plusSComm
plusB : {r1 : Nat} -> {r2 : Nat} ->
        BNat r1    -> BNat r2 ->
        BNat (plus r1 r2)

pat r1 : Nat, r2 : Nat =>
  plusB {r1} {r2} (BZ {r1}) (BZ {r2})
    = BZ {(plus r1 r2)}

pat r1 : Nat, r2 : Nat, y : BNat r2 =>
  plusB {r1} {(S r2)} (BZ {r1}) (BS {r2} y)
    = let rec : BNat (S (plus r1 r2))
              = BS {(plus r1 r2)} (plusB {r1} {r2} (BZ {r1}) y)
      in plusSComm BNat {r1} {r2} rec

pat r1 : Nat, r2 : Nat, x : BNat r1, y : BNat r2 =>
  plusB {(S r1)} {r2} (BS {r1} x) y
    = BS {(plus r1 r2)} (plusB {r1} {r2} x y)

-- Bugs:
-- Parsing compound expr inside { }... needs inner brackets just now
--
-- Examples at REPL:
-- > plusB {3} {2} (BS {2} (BZ {2})) (natToBNat {2})