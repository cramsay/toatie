-- Another non-synthesisable example, speculating about FSM encodings.
--
-- It's an indexed monad implementation of a Data/Key Store state machine. This
-- seems like a reasonable example of a hardware protocol which can and should
-- be verified with formal methods! Inspired by the intro of Edwin's "State
-- Machines All The Way Down" (https://www.idris-lang.org/drafts/sms.pdf)

import Data.Nat
import Proofs

data Unit : Type where
  MkUnit : Unit

const : {a,b : Type} -> b -> a -> b
pat a b x y =>
  const {a} {b} x y = x

{-
First let's just encode our state machine rules as a single GADT.

We'll get the jist from this, but all transitions are just defined as types
(there's no implementation for any of the actions).
-}

-- Authorisation state
data Auth : Type where
  Trusted   : Auth
  Untrusted : Auth

-- Outcome of an login attempt
data AuthResult : Type where
  OK  : AuthResult
  BAD : AuthResult

-- The key store FSM
data Store : (ty : Type) -> Auth -> (ty -> Auth) -> Type where

  -- State transitions
  ReadSecret : Store Nat  Trusted (const {Nat } {Auth} Trusted  )
  Logout     : Store Unit Trusted (const {Unit} {Auth} Untrusted)
  Login      : Store AuthResult Untrusted (\res : AuthResult => case res of
                                              OK  ==> Trusted
                                              BAD ==> Untrusted)
  -- Monad fluff
  Pure : {ty : Type} -> {st : ty -> Auth} ->  (x : ty) -> Store ty (st x) st
  Bind : {a, b : Type} -> {st1 : Auth} -> {st2 : a -> Auth} -> {st3 : b -> Auth} ->
           Store a st1 st2 -> ((x : a) -> Store b (st2 x) st3) -> Store b st1 st3

-- Example valid program
getData : Store Unit Untrusted (const {_} {_} Untrusted)
getData = Bind {_} {_} {_} {_} {_} Login \ares : AuthResult =>
          case ares of
            BAD ==> Pure {_} {\a => Untrusted} MkUnit
            OK  ==> Bind {_} {_} {_} {_} {_} ReadSecret \secret : Nat =>
                    -- Could do something with secret here!
                    Logout

{-

Although we've not defined the implementation for our state transitions, this is
a concise way of exploring the their types. We force the user to inspect the
auth result at run time, in order to properly guard trusted operations such as
ReadSecret.

If we were to ignore the check on AuthResult and charge ahead, we get a type error:

> badData : Store Unit Untrusted (const {Unit} {Auth} Untrusted)
> badData = Bind {_} {_} {_} {_} {_} Login \ares : AuthResult =>
>           Bind {_} {_} {_} {_} {_} ReadSecret \secret : Nat =>
>           -- Could do something with secret here!
>           Logout
-
< Unresolved holes in clause badData
< Constraints:
< ({case:333} ares[0]) ~~~ Trusted

Let's have a shot at splitting the monadic fluff and providing actual
implementations for each of the transition functions.

-}

data DPair : (a : Type) -> (P : a -> Type) -> Type where
  MkDPair : {a : Type} -> {P : a -> Type} -> (x : a) -> (pf : P x) -> DPair a P

-- Indexed Monad where output state type depends on output value
data IxState : (ty : Type) -> Type -> (ty -> Type) -> Type where
  MkIxState : {ty, i : Type} -> {j : (ty -> Type)} -> (i -> DPair ty j) ->
              IxState ty i j

ixRun : {a,i : Type} -> {j : a -> Type} -> IxState a i j -> i -> DPair a j
pat i, a, j, f : (i -> DPair a j), x =>
  ixRun {_} {_} {_} (MkIxState {_} {_} {_} f) x = f x

ixReturn : {a, i : Type} -> a -> IxState a i (const {_} {_} i)
pat a, i, x =>
  ixReturn {a} {i} x
    = MkIxState {_} {_} {_}
      \initS => MkDPair {_} {const {_} {_} _} x initS

ixBind : {a, b, st1 : Type} -> {st2 : a -> Type} -> {st3 : b -> Type} ->
         IxState a st1 st2 -> ((x : a) -> IxState b (st2 x) st3) -> IxState b st1 st3
pat a, b, st1, st2, st3, m, f => 
  ixBind  {a} {b} {st1} {st2} {st3} m f
    = MkIxState {b} {st1} {st3} \initS =>
        case ixRun {_} {_} {_} m initS of
          pat midA, midJ => MkDPair {_} {_} midA midJ ==>
            ixRun {_} {_} {_} (f midA) midJ

ixGet : {i : Type} -> IxState i i (const {_} {_} i)
pat i =>
  ixGet {i} = MkIxState {_} {_} {_} \si =>
              MkDPair {_} {const {_} {_} i} si si

ixPut : {i,j : Type} -> j -> IxState Unit i (const {_} {_} j)
pat i, j, so =>
  ixPut {i} {j} so = MkIxState {_} {_} {_} \si =>
                     MkDPair {_} {const {_} {_} j} MkUnit so

-- A store which is indexed by its authorisation state
-- Essentially a record of correct password and the secret key
data KeyStore : Auth -> Type where
  MkKeyStore : (a : Auth) -> (passwd : Nat) -> (secret : Nat) -> KeyStore a

-- Projection function for Store's secret
-- Should be private.
secret : (a : Auth) -> KeyStore a -> Nat
pat a passwd key =>
  secret a (MkKeyStore a passwd key) = key

-- Projection function for Store's password
-- Should be private.
password : (a : Auth) -> KeyStore a -> Nat
pat a p key =>
  password a (MkKeyStore a p key) = p

-- Helper function to define next state after authentication attempt. Defining
-- it globally helps us avoid unification of functions with different number of
-- args (case statements pick up the whole env when lifted to top level def)
stateAfterAuth : (a : AuthResult) -> Type
stateAfterAuth OK = KeyStore Trusted
stateAfterAuth BAD = KeyStore Untrusted

-- Now we'll define our transition functions

readSecret : IxState Nat (KeyStore Trusted) (const {_} {_} (KeyStore Trusted))
readSecret = ixBind {_} {_} {_} {_} {_} (ixGet {_}) \store =>
             ixReturn {_} {KeyStore Trusted} (secret Trusted store)

logout : IxState Unit (KeyStore Trusted) (const {_} {_} (KeyStore Untrusted))
logout = ixBind {_} {_} {_} {_} {_} (ixGet {_}) \store =>
         ixPut {_} {_} (MkKeyStore Untrusted (password Trusted store) (secret Trusted store))

login : (passwd : Nat) -> IxState AuthResult (KeyStore Untrusted) stateAfterAuth
pat passwd =>
  login passwd = ixBind {_} {_} {_} {_} {_} (ixGet {_}) \store : KeyStore Untrusted =>
    case eqNat passwd (password _ store) of
      False ==> MkIxState {_} {_} {_} \inStore : KeyStore Untrusted =>
                  MkDPair {_} {stateAfterAuth} BAD inStore
      True  ==> MkIxState {_} {_} {_} \inStore : KeyStore Untrusted =>
                  MkDPair {_} {stateAfterAuth} OK  (MkKeyStore _ (password _ inStore) (secret _ store))
-- FIXME the reliance on MkIxState and MkKeyStore constructors feels a bit iffy here...
       
-- Example program using our key store
getData' : (passwd : Nat) -> IxState Unit (KeyStore Untrusted) (const {_} {_} (KeyStore Untrusted))
pat passwd =>
  getData' passwd
    = ixBind {_} {_} {_} {_} {_} (login passwd) \ares : AuthResult =>
        case ares of
          BAD ==> ixReturn {_} {KeyStore Untrusted} MkUnit
          OK  ==> ixBind {_} {_} {_} {_} {_} readSecret \secret : Nat =>
                  -- Could do something with secret here!
                  logout

{- And our bad program that doesn't respect the AuthResult of `login`

badData' : (passwd : Nat) -> IxState Unit (KeyStore Untrusted) (const {_} {_} (KeyStore Untrusted))
pat passwd =>
  badData' passwd
    = ixBind {_} {_} {_} {_} {_} (login passwd) \ares : AuthResult =>
      ixBind {_} {_} {_} {_} {_} readSecret \secret : Nat =>
      -- Could do something with secret here!
      logout
-}